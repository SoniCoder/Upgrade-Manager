ECHO is off.

SQL*Plus: Release 12.1.0.2.0 Production on Mon Oct 9 15:04:05 2017

Copyright (c) 1982, 2014, Oracle.  All rights reserved.

Last Successful login time: Mon Oct 09 2017 14:50:41 +05:30

Connected to:
Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production

SQL> SET FEEDBACK ON
SQL> 
SQL> SPOOL ema_create_database.log
SQL> SHOW USER
USER is "EMAMGR"
SQL> SELECT TO_CHAR(SYSDATE, 'DD-MON-YY HH24:MI:SS') "RIGHT NOW"  FROM DUAL;

RIGHT NOW
---------------------------
09-OCT-17 15:04:05

1 row selected.

SQL> --
SQL> -- sort order of the following lines per table name only - ignore the letters 'SEQ'
SQL> --
SQL> create sequence EMA_BUSINESS_RULE_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> create sequence EMA_BUSINESS_RULE_QUEUE_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> create sequence EMA_BUSINESS_RULE_TYPE_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> create sequence EMA_EVENT_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> create sequence EMA_EXCEPTION_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> --create sequence EMA_EXCEPTION_HEADER_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;
SQL> create sequence EMA_EXCEPTION_LIFECYCLE_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> create sequence EMA_GROUP_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> create sequence EMA_HIERARCHY_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> create sequence EMA_PRIORITY_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> create sequence EMA_RULE_TYPE_RESOLUTION_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> create sequence EMA_USER_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> create sequence EMA_USER_SUBSCRIPTION_SEQ START WITH 1000 INCREMENT BY 1 CACHE 100 NOMAXVALUE;

Sequence created.

SQL> 
SQL> CREATE TABLE EMA_APPLICATION (
  2  	    APPLICATION_NAME	 VARCHAR2(255) NOT NULL,
  3  	    CONNECTION_POOL	 VARCHAR2(255) NULL
  4  );

Table created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_APPLICATION
  2  	    ADD  ( CONSTRAINT XPKEMA_APPLICATION PRIMARY KEY (
  3  		   APPLICATION_NAME) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_BUSINESS_RULE (
  2  	    BUSINESS_RULE_ID	 NUMBER(19) NOT NULL,
  3  	    BUSINESS_RULE_TYPE_ID NUMBER(19) NOT NULL,
  4  	    ENTERPRISE_NAME	 VARCHAR2(256) NOT NULL,
  5  	    PRIORITY_ID 	 NUMBER(19) NOT NULL,
  6  	    DESCRIPTION 	 VARCHAR2(1024) NULL,
  7  	    SUBJECT		 VARCHAR2(1024) NOT NULL,
  8  	    NAME		 VARCHAR2(255) NOT NULL,
  9  	    XML 		 BLOB NULL,
 10  	    NOTIFICATION_TYPE	 NUMBER(10) NOT NULL,
 11  	    IS_AGED		 NUMBER(1) NOT NULL,
 12  	    CATEGORY_NAME	 VARCHAR2(255) NULL,
 13  	    AUTO_RESOLUTION_OPTION_ID NUMBER(19) NULL,
 14  	    AUTO_RESOLUTION_EMAIL NUMBER(1) NULL,
 15  	    SYNCHRONIZE 	 NUMBER(1) DEFAULT 0 NOT NULL,
 16  	    ACTIVITY_TYPE	 NUMBER(1) DEFAULT 0 NOT NULL,
 17  	    SERVER		 VARCHAR2(255) NULL,
 18  	    IS_NOTIFICATION_ONLY NUMBER(1) NOT NULL,
 19  	    LAST_NOTIFICATION_TIME TIMESTAMP(3) NOT NULL,
 20  	    IS_REAL_TIME	 NUMBER(1) NOT NULL
 21  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_BUSINESS_RULE ON EMA_BUSINESS_RULE
  2  (
  3  	    NAME			   ASC,
  4  	    ENTERPRISE_NAME		   ASC
  5  );

Index created.

SQL> 
SQL> CREATE INDEX XIF17EMA_BUSINESS_RULE ON EMA_BUSINESS_RULE
  2  (
  3  	    ENTERPRISE_NAME		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF18EMA_BUSINESS_RULE ON EMA_BUSINESS_RULE
  2  (
  3  	    PRIORITY_ID 		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF19EMA_BUSINESS_RULE ON EMA_BUSINESS_RULE
  2  (
  3  	    BUSINESS_RULE_TYPE_ID	   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF20EMA_BUSINESS_RULE ON EMA_BUSINESS_RULE
  2  (
  3  	    AUTO_RESOLUTION_OPTION_ID	   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE
  2  	    ADD  ( CONSTRAINT XPKEMA_BUSINESS_RULE PRIMARY KEY (
  3  		   BUSINESS_RULE_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_BUSINESS_RULE_ESCALATION (
  2  	    BUSINESS_RULE_ID	 NUMBER(19) NOT NULL,
  3  	    ESCALATION_TARGET	 VARCHAR2(255) NOT NULL,
  4  	    DELAY		 NUMBER(19) NOT NULL,
  5  	    LOOKUP_USER 	 NUMBER(1) NOT NULL,
  6  	    DEFAULT_FORMAT	 NUMBER(10) NULL,
  7  	    DELAY_UNIT		 NUMBER(10) DEFAULT 0 NOT NULL
  8  );

Table created.

SQL> 
SQL> CREATE INDEX XIF16EMA_BUSINESS_RULE_ESCALA ON EMA_BUSINESS_RULE_ESCALATION
  2  (
  3  	    BUSINESS_RULE_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE_ESCALATION
  2  	    ADD  ( CONSTRAINT XPKEMA_BUSINESS_RULE_ESCALATIO PRIMARY KEY (
  3  		   BUSINESS_RULE_ID, DELAY, ESCALATION_TARGET) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_BUSINESS_RULE_QUEUE (
  2  	    JOB_ID		 NUMBER(19) NOT NULL,
  3  	    BUSINESS_RULE_ID	 NUMBER(19) NOT NULL,
  4  	    USER_ID		 NUMBER(19) NULL,
  5  	    RULE_STATUS 	 NUMBER(1) NULL,
  6  	    START_TIME		 DATE NOT NULL,
  7  	    RULE_STATUS_DESC	 VARCHAR2(4000) NULL,
  8  	    END_TIME		 DATE NULL,
  9  	    OVERALL_STATUS	 VARCHAR2(25) NOT NULL,
 10  	    OVERALL_STATUS_DESC  VARCHAR2(255) NULL,
 11  	    SERVER		 VARCHAR2(255) NULL
 12  );

Table created.

SQL> 
SQL> CREATE INDEX XIF43EMA_BUSINESS_RULE_QUEUE ON EMA_BUSINESS_RULE_QUEUE
  2  (
  3  	    BUSINESS_RULE_ID		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF44EMA_BUSINESS_RULE_QUEUE ON EMA_BUSINESS_RULE_QUEUE
  2  (
  3  	    USER_ID			   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE_QUEUE
  2  	    ADD  ( CONSTRAINT XPKEMA_BUSINESS_RULE_QUEUE PRIMARY KEY (
  3  		   BUSINESS_RULE_ID, JOB_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_BUSINESS_RULE_TEMPLATE (
  2  	    BUSINESS_RULE_ID	 NUMBER(19) NOT NULL,
  3  	    FORMAT		 NUMBER(10) NOT NULL,
  4  	    TEMPLATE_NAME	 VARCHAR2(255) NOT NULL
  5  );

Table created.

SQL> 
SQL> CREATE INDEX XIF1EMA_BUSINESS_RULE_TEMPLATE ON EMA_BUSINESS_RULE_TEMPLATE
  2  (
  3  	    BUSINESS_RULE_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE_TEMPLATE
  2  	    ADD  ( CONSTRAINT XPKEMA_BUSINESS_RULE_TEMPLATE PRIMARY KEY (
  3  		   BUSINESS_RULE_ID, FORMAT) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_BUSINESS_RULE_TYPE (
  2  	    APPLICATION_NAME	 VARCHAR2(255) NOT NULL,
  3  	    BUSINESS_RULE_TYPE_ID NUMBER(19) NOT NULL,
  4  	    NAME		 VARCHAR2(255) NOT NULL,
  5  	    DESCRIPTION 	 VARCHAR2(1024) NULL,
  6  	    IS_EVENT		 NUMBER(1) NOT NULL,
  7  	    CLASS_NAME		 VARCHAR2(1024) NOT NULL,
  8  	    RESOURCE_FILE_NAME	 VARCHAR2(255) NULL,
  9  	    SUPPORTS_AGING	 NUMBER(1) DEFAULT 0 NOT NULL,
 10  	    SUPPORTS_COPY	 NUMBER(1) DEFAULT 0 NOT NULL,
 11  	    PROVIDES_COPY	 NUMBER(1) DEFAULT 0 NOT NULL
 12  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_BUSINESS_RULE_TYPE ON EMA_BUSINESS_RULE_TYPE
  2  (
  3  	    APPLICATION_NAME		   ASC,
  4  	    NAME			   ASC
  5  );

Index created.

SQL> 
SQL> CREATE INDEX XIF1EMA_BUSINESS_RULE_TYPE ON EMA_BUSINESS_RULE_TYPE
  2  (
  3  	    APPLICATION_NAME		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE_TYPE
  2  	    ADD  ( CONSTRAINT XPKEMA_BUSINESS_RULE_TYPE PRIMARY KEY (
  3  		   BUSINESS_RULE_TYPE_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_DATA_COMP_EX_DATA (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    SCHEMA_NAME 	 VARCHAR2(255) NOT NULL,
  4  	    TAB_NAME		 VARCHAR2(255) NOT NULL,
  5  	    COL_NAME		 VARCHAR2(255) NOT NULL,
  6  	    COL_VALUE		 VARCHAR2(4000) NULL,
  7  	    COL_VALUE_CLASS	 VARCHAR2(64) NOT NULL,
  8  	    OBJECT_CLASS_NAME	 VARCHAR2(1024) NOT NULL,
  9  	    OBJECT_CLASS_DATA	 VARCHAR2(1024) NULL,
 10  	    IS_DISPLAY		 NUMBER(1) NOT NULL,
 11  	    IS_KEY		 NUMBER(1) NOT NULL,
 12  	    SORT_ORDER		 NUMBER(10) NULL
 13  );

Table created.

SQL> 
SQL> CREATE INDEX XIF2EMA_DATA_COMP_EX_DATA ON EMA_DATA_COMP_EX_DATA
  2  (
  3  	    EXCEPTION_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_DATA_COMP_EX_DATA_ARCHIVE (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    SCHEMA_NAME 	 VARCHAR2(255) NOT NULL,
  4  	    TAB_NAME		 VARCHAR2(255) NOT NULL,
  5  	    COL_NAME		 VARCHAR2(255) NOT NULL,
  6  	    COL_VALUE		 VARCHAR2(4000) NULL,
  7  	    COL_VALUE_CLASS	 VARCHAR2(64) NOT NULL,
  8  	    OBJECT_CLASS_NAME	 VARCHAR2(1024) NOT NULL,
  9  	    OBJECT_CLASS_DATA	 VARCHAR2(1024) NULL,
 10  	    IS_DISPLAY		 NUMBER(1) NOT NULL,
 11  	    IS_KEY		 NUMBER(1) NOT NULL,
 12  	    SORT_ORDER		 NUMBER(10) NULL
 13  );

Table created.

SQL> 
SQL> CREATE INDEX XIF1EMA_DATA_COMP_EX_DATA_ARCH ON EMA_DATA_COMP_EX_DATA_ARCHIVE
  2  (
  3  	    EXCEPTION_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_DATA_COMP_EXCEP (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    SOURCE_APPLICATION_NAME VARCHAR2(255) NOT NULL,
  4  	    SQL_CMD		 VARCHAR2(1024) NOT NULL
  5  );

Table created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_DATA_COMP_EXCEP
  2  	    ADD  ( CONSTRAINT XPKEMA_DATA_COMP_EXCEP PRIMARY KEY (
  3  		   EXCEPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_DATA_COMP_EXCEP_ARCHIVE (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    SOURCE_APPLICATION_NAME VARCHAR2(255) NOT NULL,
  4  	    SQL_CMD		 VARCHAR2(1024) NOT NULL
  5  );

Table created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_DATA_COMP_EXCEP_ARCHIVE
  2  	    ADD  ( CONSTRAINT XPKEMA_DATA_COMP_EXCEP_ARCHIVE PRIMARY KEY (
  3  		   EXCEPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_ENTERPRISE (
  2  	    ENTERPRISE_NAME	 VARCHAR2(256) NOT NULL,
  3  	    ENTERPRISE_ID	 NUMBER(19) NOT NULL,
  4  	    HERITAGE		 VARCHAR2(2000) NOT NULL,
  5  	    PARENT_ID		 NUMBER(19) NOT NULL,
  6  	    ENTERPRISE_LEVEL	 NUMBER(10) NOT NULL
  7  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_ENTERPRISE ON EMA_ENTERPRISE
  2  (
  3  	    ENTERPRISE_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_ENTERPRISE
  2  	    ADD  ( CONSTRAINT XPKEMA_ENTERPRISE PRIMARY KEY (
  3  		   ENTERPRISE_NAME) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_ESCALATION_ARCHIVE (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    DELAY		 NUMBER(19) NOT NULL,
  4  	    USERID		 VARCHAR2(255) NOT NULL,
  5  	    FORMAT		 NUMBER(10) NULL,
  6  	    TIME_PROCESSED	 TIMESTAMP(3) NULL,
  7  	    ESCALATION_TARGET	 VARCHAR2(255) NOT NULL,
  8  	    SUB_TARGET		 VARCHAR2(255) NULL,
  9  	    MANUALLY_ESCALATED	 NUMBER(1) DEFAULT 0 NOT NULL,
 10  	    LAST_UPDATED	 TIMESTAMP(3) NOT NULL
 11  );

Table created.

SQL> 
SQL> CREATE INDEX XIF36EMA_ESCALATION_ARCHIVE ON EMA_ESCALATION_ARCHIVE
  2  (
  3  	    EXCEPTION_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_EVENT (
  2  	    ENTERPRISE_NAME	 VARCHAR2(256) NOT NULL,
  3  	    EVENT_ID		 NUMBER(19) NOT NULL,
  4  	    APPLICATION_NAME	 VARCHAR2(255) NOT NULL,
  5  	    BUSINESS_RULE_TYPE	 VARCHAR2(255) NOT NULL,
  6  	    TIME_CREATED	 DATE NOT NULL,
  7  	    XML 		 LONG RAW NULL
  8  );

Table created.

SQL> 
SQL> CREATE INDEX XIF12EMA_EVENT ON EMA_EVENT
  2  (
  3  	    ENTERPRISE_NAME		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF2EMA_EVENT ON EMA_EVENT
  2  (
  3  	    APPLICATION_NAME		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIE1EMA_EVENT ON EMA_EVENT
  2  (
  3  	    BUSINESS_RULE_TYPE		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EVENT
  2  	    ADD  ( CONSTRAINT XPKEMA_EVENT PRIMARY KEY (EVENT_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_EVENT_SCHEDULE (
  2  	    EVENT_ID		 NUMBER(19) NOT NULL,
  3  	    BUSINESS_RULE_ID	 NUMBER(19) NOT NULL
  4  );

Table created.

SQL> 
SQL> CREATE INDEX XIF35EMA_EVENT_SCHEDULE ON EMA_EVENT_SCHEDULE
  2  (
  3  	    EVENT_ID			   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF37EMA_EVENT_SCHEDULE ON EMA_EVENT_SCHEDULE
  2  (
  3  	    BUSINESS_RULE_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EVENT_SCHEDULE
  2  	    ADD  ( CONSTRAINT XPKEMA_EVENT_SCHEDULE PRIMARY KEY (EVENT_ID,
  3  		   BUSINESS_RULE_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_EVENT_TYPE_MAP (
  2  	    BUSINESS_RULE_TYPE_ID NUMBER(19) NOT NULL,
  3  	    EVENT_TYPE		 VARCHAR2(255) NOT NULL,
  4  	    EVENT_SOURCE	 VARCHAR2(255) NOT NULL
  5  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_EVENT_TYPE_MAP ON EMA_EVENT_TYPE_MAP
  2  (
  3  	    EVENT_TYPE			   ASC,
  4  	    EVENT_SOURCE		   ASC
  5  );

Index created.

SQL> 
SQL> CREATE INDEX XIF1EMA_EVENT_TYPE_MAP ON EMA_EVENT_TYPE_MAP
  2  (
  3  	    BUSINESS_RULE_TYPE_ID	   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_EXCEPTION (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    APPLICATION_NAME	 VARCHAR2(255) NOT NULL,
  4  	    ENTERPRISE_NAME	 VARCHAR2(256) NOT NULL,
  5  	    BUSINESS_OBJECT_ID	 VARCHAR2(600) NOT NULL,
  6  	    BUSINESS_RULE_NAME	 VARCHAR2(255) NOT NULL,
  7  	    BUSINESS_RULE_TYPE	 VARCHAR2(255) NOT NULL,
  8  	    PRIORITY_NAME	 VARCHAR2(255) NOT NULL,
  9  	    ENTITY		 VARCHAR2(1024) NOT NULL,
 10  	    SUBJECT		 VARCHAR2(1024) NOT NULL,
 11  	    TIME_CREATED	 TIMESTAMP(3) NOT NULL,
 12  	    LAST_UPDATED	 TIMESTAMP(3) NOT NULL,
 13  	    OBJECT_CLASS_NAME	 VARCHAR2(1024) NOT NULL,
 14  	    OBJECT_CLASS_DATA	 VARCHAR2(1024) NULL,
 15  	    CATEGORY_NAME	 VARCHAR2(255) NULL,
 16  	    RESOLVED_BY 	 VARCHAR2(255) NULL,
 17  	    TIME_RESOLVED	 TIMESTAMP(3) NULL,
 18  	    REASON_CODE 	 VARCHAR2(64) NULL,
 19  	    REASON_DESCRIPTION	 VARCHAR2(255) NULL,
 20  	    RESOLUTION_OPTION	 VARCHAR2(255) NULL,
 21  	    RESOLUTION_STATUS	 NUMBER(10) DEFAULT -1 NOT NULL,
 22  	    EXTENDED_BOID	 LONG RAW NULL
 23  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_EXCEPTION ON EMA_EXCEPTION
  2  (
  3  	    APPLICATION_NAME		   ASC,
  4  	    BUSINESS_OBJECT_ID		   ASC,
  5  	    BUSINESS_RULE_TYPE		   ASC,
  6  	    BUSINESS_RULE_NAME		   ASC,
  7  	    ENTERPRISE_NAME		   ASC
  8  );

Index created.

SQL> 
SQL> CREATE INDEX XIF2EMA_EXCEPTION ON EMA_EXCEPTION
  2  (
  3  	    APPLICATION_NAME		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF42EMA_EXCEPTION ON EMA_EXCEPTION
  2  (
  3  	    ENTERPRISE_NAME		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION
  2  	    ADD  ( CONSTRAINT XPKEMA_EXCEPTION PRIMARY KEY (EXCEPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_EXCEPTION_ARCHIVE (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    APPLICATION_NAME	 VARCHAR2(255) NOT NULL,
  4  	    ENTERPRISE_NAME	 VARCHAR2(256) NOT NULL,
  5  	    BUSINESS_OBJECT_ID	 VARCHAR2(600) NOT NULL,
  6  	    BUSINESS_RULE_NAME	 VARCHAR2(255) NOT NULL,
  7  	    BUSINESS_RULE_TYPE	 VARCHAR2(255) NOT NULL,
  8  	    PRIORITY_NAME	 VARCHAR2(255) NOT NULL,
  9  	    ENTITY		 VARCHAR2(1024) NOT NULL,
 10  	    SUBJECT		 VARCHAR2(1024) NOT NULL,
 11  	    TIME_CREATED	 TIMESTAMP(3) NOT NULL,
 12  	    LAST_UPDATED	 TIMESTAMP(3) NOT NULL,
 13  	    OBJECT_CLASS_NAME	 VARCHAR2(1024) NOT NULL,
 14  	    OBJECT_CLASS_DATA	 VARCHAR2(1024) NULL,
 15  	    CATEGORY_NAME	 VARCHAR2(255) NULL,
 16  	    RESOLVED_BY 	 VARCHAR2(255) NULL,
 17  	    TIME_RESOLVED	 TIMESTAMP(3) NULL,
 18  	    REASON_CODE 	 VARCHAR2(64) NULL,
 19  	    REASON_DESCRIPTION	 VARCHAR2(255) NULL,
 20  	    RESOLUTION_OPTION	 VARCHAR2(255) NULL,
 21  	    RESOLUTION_STATUS	 NUMBER(10) DEFAULT -1 NOT NULL,
 22  	    EXTENDED_BOID	 LONG RAW NULL
 23  );

Table created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION_ARCHIVE
  2  	    ADD  ( CONSTRAINT XPKEMA_EXCEPTION_ARCHIVE PRIMARY KEY (
  3  		   EXCEPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_EXCEPTION_ESCALATION (
  2  	    DELAY		 NUMBER(19) NOT NULL,
  3  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  4  	    USERID		 VARCHAR2(255) NOT NULL,
  5  	    FORMAT		 NUMBER(10) NULL,
  6  	    ESCALATION_TARGET	 VARCHAR2(255) NOT NULL,
  7  	    PROCESSED		 NUMBER(1) NOT NULL,
  8  	    TIME_PROCESSED	 TIMESTAMP(3) NULL,
  9  	    SUB_TARGET		 VARCHAR2(255) NULL,
 10  	    MANUALLY_ESCALATED	 NUMBER(1) DEFAULT 0 NOT NULL,
 11  	    LAST_UPDATED	 TIMESTAMP(3) NOT NULL
 12  );

Table created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION_ESCALATION
  2  	    ADD  ( CONSTRAINT XPKEMA_EXCEPTION_ESCALATION PRIMARY KEY (
  3  		   EXCEPTION_ID, DELAY, USERID, ESCALATION_TARGET) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_EXCEPTION_LIFECYCLE (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    SEND_RESOLUTION_EMAILS NUMBER(1) DEFAULT 0 NOT NULL,
  4  	    RESOLUTION_BATCH_ID  NUMBER(19) NULL,
  5  	    RESOLUTION_EMAILS_SENT NUMBER(1) DEFAULT 0 NOT NULL,
  6  	    RESOLUTION_NOTIFICATION_TIME TIMESTAMP(3) NOT NULL
  7  );

Table created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION_LIFECYCLE
  2  	    ADD  ( CONSTRAINT XPKEMA_EXCEPTION_LIFECYCLE PRIMARY KEY (
  3  		   EXCEPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_EXCEPTION_RESPONSE (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    USER_NAME		 VARCHAR2(256) NOT NULL,
  4  	    TIME_CREATED	 DATE NOT NULL,
  5  	    SUBJECT		 VARCHAR2(1024) NOT NULL,
  6  	    MESSAGE		 VARCHAR2(4000) NULL
  7  );

Table created.

SQL> 
SQL> CREATE INDEX XIF38EMA_EXCEPTION_RESPONSE ON EMA_EXCEPTION_RESPONSE
  2  (
  3  	    EXCEPTION_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_EXCEPTION_VIEWED (
  2  	    USER_ID		 NUMBER(19) NOT NULL,
  3  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  4  	    READ_YET		 NUMBER(1) NOT NULL
  5  );

Table created.

SQL> 
SQL> CREATE INDEX XIF21EMA_EXCEPTION_VIEWED ON EMA_EXCEPTION_VIEWED
  2  (
  3  	    EXCEPTION_ID		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF5EMA_EXCEPTION_VIEWED ON EMA_EXCEPTION_VIEWED
  2  (
  3  	    USER_ID			   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION_VIEWED
  2  	    ADD  ( CONSTRAINT XPKEMA_EXCEPTION_VIEWED PRIMARY KEY (USER_ID,
  3  		   EXCEPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_EXT_USER_RULE_ACCESS (
  2  	    BUSINESS_RULE_ID	 NUMBER(19) NOT NULL,
  3  	    EMAIL		 VARCHAR2(255) NOT NULL,
  4  	    DELAY_MINUTES	 NUMBER(19) NOT NULL,
  5  	    DELAY_UNIT		 NUMBER(10) NOT NULL,
  6  	    FORMAT		 NUMBER(10) NOT NULL,
  7  	    TIME_CREATED	 TIMESTAMP(3) NOT NULL
  8  );

Table created.

SQL> 
SQL> CREATE INDEX XIF1EMA_EXT_USER_RULE_ACCESS ON EMA_EXT_USER_RULE_ACCESS
  2  (
  3  	    BUSINESS_RULE_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXT_USER_RULE_ACCESS
  2  	    ADD  ( CONSTRAINT XPKEMA_EXT_USER_RULE_ACCESS PRIMARY KEY (
  3  		   BUSINESS_RULE_ID, EMAIL, DELAY_MINUTES) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_GROUP (
  2  	    GROUP_ID		 NUMBER(19) NOT NULL,
  3  	    ENTERPRISE_NAME	 VARCHAR2(256) NOT NULL,
  4  	    NAME		 VARCHAR2(255) NOT NULL,
  5  	    DESCRIPTION 	 VARCHAR2(1024) NULL
  6  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_GROUP ON EMA_GROUP
  2  (
  3  	    NAME			   ASC,
  4  	    ENTERPRISE_NAME		   ASC
  5  );

Index created.

SQL> 
SQL> CREATE INDEX XIF27EMA_GROUP ON EMA_GROUP
  2  (
  3  	    ENTERPRISE_NAME		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_GROUP
  2  	    ADD  ( CONSTRAINT XPKEMA_GROUP PRIMARY KEY (GROUP_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_GROUP_RULE_ACCESS (
  2  	    GROUP_ID		 NUMBER(19) NOT NULL,
  3  	    BUSINESS_RULE_ID	 NUMBER(19) NOT NULL,
  4  	    DELAY_MINUTES	 NUMBER(19) NOT NULL,
  5  	    DELAY_UNIT		 NUMBER(10) NOT NULL
  6  );

Table created.

SQL> 
SQL> CREATE INDEX XIF23EMA_GROUP_RULE_ACCESS ON EMA_GROUP_RULE_ACCESS
  2  (
  3  	    GROUP_ID			   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF24EMA_GROUP_RULE_ACCESS ON EMA_GROUP_RULE_ACCESS
  2  (
  3  	    BUSINESS_RULE_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_GROUP_RULE_ACCESS
  2  	    ADD  ( CONSTRAINT XPKEMA_GROUP_RULE_ACCESS PRIMARY KEY (
  3  		   GROUP_ID, BUSINESS_RULE_ID, DELAY_MINUTES) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_HIERARCHY (
  2  	    HIERARCHY_ID	 NUMBER(19) NOT NULL,
  3  	    NAME		 VARCHAR2(255) NOT NULL,
  4  	    DESCRIPTION 	 VARCHAR2(1024) NULL,
  5  	    ORDERED_LIST	 VARCHAR2(1024) NOT NULL
  6  );

Table created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_HIERARCHY
  2  	    ADD  ( CONSTRAINT XPKEMA_HIERARCHY PRIMARY KEY (HIERARCHY_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_PRIORITY (
  2  	    PRIORITY_ID 	 NUMBER(19) NOT NULL,
  3  	    NAME		 VARCHAR2(255) NOT NULL,
  4  	    DESCRIPTION 	 VARCHAR2(1024) NULL,
  5  	    PRIORITY_ORDER	 NUMBER(10) NOT NULL
  6  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_PRIORITY ON EMA_PRIORITY
  2  (
  3  	    NAME			   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_PRIORITY
  2  	    ADD  ( CONSTRAINT XPKEMA_PRIORITY PRIMARY KEY (PRIORITY_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_REASON_CODE (
  2  	    REASON_CODE 	 VARCHAR2(64) NOT NULL
  3  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_REASON_CODE ON EMA_REASON_CODE
  2  (
  3  	    REASON_CODE 		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_RESPONSE_ARCHIVE (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    USER_NAME		 VARCHAR2(256) NOT NULL,
  4  	    TIME_CREATED	 DATE NOT NULL,
  5  	    SUBJECT		 VARCHAR2(1024) NOT NULL,
  6  	    MESSAGE		 VARCHAR2(4000) NULL
  7  );

Table created.

SQL> 
SQL> CREATE INDEX XIF41EMA_RESPONSE_ARCHIVE ON EMA_RESPONSE_ARCHIVE
  2  (
  3  	    EXCEPTION_ID		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_RULE_RESOLUTION (
  2  	    BUSINESS_RULE_ID	 NUMBER(19) NOT NULL,
  3  	    OPTION_ID		 NUMBER(19) NOT NULL
  4  );

Table created.

SQL> 
SQL> CREATE INDEX XIF1EMA_RULE_RESOLUTION ON EMA_RULE_RESOLUTION
  2  (
  3  	    BUSINESS_RULE_ID		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF2EMA_RULE_RESOLUTION ON EMA_RULE_RESOLUTION
  2  (
  3  	    OPTION_ID			   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_RULE_RESOLUTION
  2  	    ADD  ( CONSTRAINT XPKEMA_RULE_RESOLUTION PRIMARY KEY (
  3  		   BUSINESS_RULE_ID, OPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_RULE_TYPE_RESOLUTION (
  2  	    OPTION_ID		 NUMBER(19) NOT NULL,
  3  	    BUSINESS_RULE_TYPE_ID NUMBER(19) NOT NULL,
  4  	    RESOLUTION_TARGET_URL VARCHAR2(255) NOT NULL,
  5  	    NAME		 VARCHAR2(255) NOT NULL,
  6  	    RESOLUTION_SERVICE_NAME VARCHAR2(255) NOT NULL,
  7  	    RESOLUTION_PORT_NAME VARCHAR2(255) NOT NULL
  8  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_RULE_TYPE_RESOLUTION ON EMA_RULE_TYPE_RESOLUTION
  2  (
  3  	    BUSINESS_RULE_TYPE_ID	   ASC,
  4  	    NAME			   ASC
  5  );

Index created.

SQL> 
SQL> CREATE INDEX XIF1EMA_RULE_TYPE_RESOLUTION ON EMA_RULE_TYPE_RESOLUTION
  2  (
  3  	    BUSINESS_RULE_TYPE_ID	   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_RULE_TYPE_RESOLUTION
  2  	    ADD  ( CONSTRAINT XPKEMA_RULE_TYPE_RESOLUTION PRIMARY KEY (
  3  		   OPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_SCHEMA_LOG (
  2  	    NAME		 VARCHAR2(255) NOT NULL,
  3  	    VALUE		 VARCHAR2(255) NULL,
  4  	    LOG_DATE		 DATE NULL,
  5  	    DESCRIPTION 	 VARCHAR2(1024) NULL,
  6  	    LINE		 NUMBER(10) NULL
  7  );

Table created.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_USER (
  2  	    USER_ID		 NUMBER(19) NOT NULL,
  3  	    USER_NAME		 VARCHAR2(256) NOT NULL,
  4  	    ENTERPRISE_NAME	 VARCHAR2(256) NOT NULL
  5  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_USER ON EMA_USER
  2  (
  3  	    USER_NAME			   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF25EMA_USER ON EMA_USER
  2  (
  3  	    ENTERPRISE_NAME		   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER
  2  	    ADD  ( CONSTRAINT XPKEMA_USER PRIMARY KEY (USER_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_USER_GROUP (
  2  	    USER_ID		 NUMBER(19) NOT NULL,
  3  	    GROUP_ID		 NUMBER(19) NOT NULL
  4  );

Table created.

SQL> 
SQL> CREATE INDEX XIF28EMA_USER_GROUP ON EMA_USER_GROUP
  2  (
  3  	    USER_ID			   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF29EMA_USER_GROUP ON EMA_USER_GROUP
  2  (
  3  	    GROUP_ID			   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_GROUP
  2  	    ADD  ( CONSTRAINT XPKEMA_USER_GROUP PRIMARY KEY (USER_ID,
  3  		   GROUP_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_USER_NOTIFICATION (
  2  	    PRIORITY_ID 	 NUMBER(19) NOT NULL,
  3  	    USER_ID		 NUMBER(19) NOT NULL,
  4  	    FORMAT		 NUMBER(10) NOT NULL,
  5  	    EMAIL		 VARCHAR2(255) NULL
  6  );

Table created.

SQL> 
SQL> CREATE INDEX XIF3EMA_USER_NOTIFICATION ON EMA_USER_NOTIFICATION
  2  (
  3  	    PRIORITY_ID 		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF4EMA_USER_NOTIFICATION ON EMA_USER_NOTIFICATION
  2  (
  3  	    USER_ID			   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_NOTIFICATION
  2  	    ADD  ( CONSTRAINT XPKEMA_USER_NOTIFICATION PRIMARY KEY (
  3  		   PRIORITY_ID, USER_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_USER_RULE_ACCESS (
  2  	    USER_ID		 NUMBER(19) NOT NULL,
  3  	    BUSINESS_RULE_ID	 NUMBER(19) NOT NULL,
  4  	    DELAY_MINUTES	 NUMBER(19) NOT NULL,
  5  	    DELAY_UNIT		 NUMBER(10) NOT NULL
  6  );

Table created.

SQL> 
SQL> CREATE INDEX XIF7EMA_USER_RULE_ACCESS ON EMA_USER_RULE_ACCESS
  2  (
  3  	    BUSINESS_RULE_ID		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF8EMA_USER_RULE_ACCESS ON EMA_USER_RULE_ACCESS
  2  (
  3  	    USER_ID			   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_RULE_ACCESS
  2  	    ADD  ( CONSTRAINT XPKEMA_USER_RULE_ACCESS PRIMARY KEY (USER_ID,
  3  		   BUSINESS_RULE_ID, DELAY_MINUTES) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_USER_STATUS_EXCEP_ARCHIVE (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    USER_NAME		 VARCHAR2(256) NOT NULL,
  4  	    LOGIN_FAILURES	 NUMBER(19) NOT NULL,
  5  	    MINIMUM_ATTEMPTS	 NUMBER(19) NOT NULL,
  6  	    EVENT_DATE		 TIMESTAMP(3) NOT NULL,
  7  	    LAST_ACCESS_DATE	 TIMESTAMP(3) NOT NULL,
  8  	    FIRST_FAILURE_DATE	 TIMESTAMP(3) NOT NULL,
  9  	    ACCOUNT_STATUS	 VARCHAR2(255) NOT NULL,
 10  	    FIRST_NAME		 VARCHAR2(255) NULL,
 11  	    LAST_NAME		 VARCHAR2(255) NULL,
 12  	    EMAIL		 VARCHAR2(255) NULL,
 13  	    TELEPHONE		 VARCHAR2(255) NULL,
 14  	    INCLUDE_FAILED_LOGINS NUMBER(1) NOT NULL,
 15  	    INCLUDE_ACCOUNT_LOCKOUTS NUMBER(1) NOT NULL
 16  );

Table created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_STATUS_EXCEP_ARCHIVE
  2  	    ADD  ( CONSTRAINT XPKEMA_USER_STATUS_EXCEP_ARCHI PRIMARY KEY (
  3  		   EXCEPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_USER_STATUS_EXCEPTION (
  2  	    EXCEPTION_ID	 NUMBER(19) NOT NULL,
  3  	    USER_NAME		 VARCHAR2(256) NOT NULL,
  4  	    LOGIN_FAILURES	 NUMBER(19) NOT NULL,
  5  	    MINIMUM_ATTEMPTS	 NUMBER(19) NOT NULL,
  6  	    EVENT_DATE		 TIMESTAMP(3) NOT NULL,
  7  	    LAST_ACCESS_DATE	 TIMESTAMP(3) NOT NULL,
  8  	    FIRST_FAILURE_DATE	 TIMESTAMP(3) NOT NULL,
  9  	    ACCOUNT_STATUS	 VARCHAR2(255) NOT NULL,
 10  	    FIRST_NAME		 VARCHAR2(255) NULL,
 11  	    LAST_NAME		 VARCHAR2(255) NULL,
 12  	    EMAIL		 VARCHAR2(255) NULL,
 13  	    TELEPHONE		 VARCHAR2(255) NULL,
 14  	    INCLUDE_FAILED_LOGINS NUMBER(1) NOT NULL,
 15  	    INCLUDE_ACCOUNT_LOCKOUTS NUMBER(1) NOT NULL
 16  );

Table created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_STATUS_EXCEPTION
  2  	    ADD  ( CONSTRAINT XPKEMA_USER_STATUS_EXCEPTION PRIMARY KEY (
  3  		   EXCEPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> CREATE TABLE EMA_USER_SUBSCRIPTION (
  2  	    USER_SUBSCRIPTION_ID NUMBER(19) NOT NULL,
  3  	    BUSINESS_RULE_ID	 NUMBER(19) NOT NULL,
  4  	    USER_ID		 NUMBER(19) NOT NULL,
  5  	    TIME_CREATED	 TIMESTAMP(3) NOT NULL
  6  );

Table created.

SQL> 
SQL> CREATE UNIQUE INDEX XAK1EMA_USER_SUBSCRIPTION ON EMA_USER_SUBSCRIPTION
  2  (
  3  	    BUSINESS_RULE_ID		   ASC,
  4  	    USER_ID			   ASC
  5  );

Index created.

SQL> 
SQL> CREATE INDEX XIF1EMA_USER_SUBSCRIPTION ON EMA_USER_SUBSCRIPTION
  2  (
  3  	    BUSINESS_RULE_ID		   ASC
  4  );

Index created.

SQL> 
SQL> CREATE INDEX XIF2EMA_USER_SUBSCRIPTION ON EMA_USER_SUBSCRIPTION
  2  (
  3  	    USER_ID			   ASC
  4  );

Index created.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_SUBSCRIPTION
  2  	    ADD  ( CONSTRAINT XPKEMA_USER_SUBSCRIPTION PRIMARY KEY (
  3  		   USER_SUBSCRIPTION_ID) ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE
  2  	    ADD  ( CONSTRAINT EMA_RULE_TYPE_RESOLUTION_2
  3  		   FOREIGN KEY (AUTO_RESOLUTION_OPTION_ID)
  4  				  REFERENCES EMA_RULE_TYPE_RESOLUTION
  5  				  ON DELETE SET NULL ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE
  2  	    ADD  ( CONSTRAINT EMA_R_19
  3  		   FOREIGN KEY (BUSINESS_RULE_TYPE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE_TYPE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE
  2  	    ADD  ( CONSTRAINT EMA_R_18
  3  		   FOREIGN KEY (PRIORITY_ID)
  4  				  REFERENCES EMA_PRIORITY ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE
  2  	    ADD  ( CONSTRAINT EMA_R_17
  3  		   FOREIGN KEY (ENTERPRISE_NAME)
  4  				  REFERENCES EMA_ENTERPRISE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE_ESCALATION
  2  	    ADD  ( CONSTRAINT EMA_R_16
  3  		   FOREIGN KEY (BUSINESS_RULE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE_QUEUE
  2  	    ADD  ( CONSTRAINT EMA_R_44
  3  		   FOREIGN KEY (USER_ID)
  4  				  REFERENCES EMA_USER
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE_QUEUE
  2  	    ADD  ( CONSTRAINT EMA_R_43
  3  		   FOREIGN KEY (BUSINESS_RULE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE_TEMPLATE
  2  	    ADD  ( CONSTRAINT EMA_R_13
  3  		   FOREIGN KEY (BUSINESS_RULE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_BUSINESS_RULE_TYPE
  2  	    ADD  ( CONSTRAINT EMA_R_53
  3  		   FOREIGN KEY (APPLICATION_NAME)
  4  				  REFERENCES EMA_APPLICATION
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_DATA_COMP_EX_DATA
  2  	    ADD  ( CONSTRAINT EMA_R_56
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_DATA_COMP_EXCEP
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_DATA_COMP_EX_DATA_ARCHIVE
  2  	    ADD  ( CONSTRAINT EMA_R_57
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_DATA_COMP_EXCEP_ARCHIVE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_DATA_COMP_EXCEP
  2  	    ADD  ( CONSTRAINT EMA_R_54
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_EXCEPTION
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_DATA_COMP_EXCEP_ARCHIVE
  2  	    ADD  ( CONSTRAINT EMA_R_55
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_EXCEPTION_ARCHIVE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_ESCALATION_ARCHIVE
  2  	    ADD  ( CONSTRAINT EMA_R_36
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_EXCEPTION_ARCHIVE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EVENT
  2  	    ADD  ( CONSTRAINT EMA_R_52
  3  		   FOREIGN KEY (APPLICATION_NAME)
  4  				  REFERENCES EMA_APPLICATION
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EVENT
  2  	    ADD  ( CONSTRAINT EMA_R_12
  3  		   FOREIGN KEY (ENTERPRISE_NAME)
  4  				  REFERENCES EMA_ENTERPRISE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EVENT_SCHEDULE
  2  	    ADD  ( CONSTRAINT EMA_R_37
  3  		   FOREIGN KEY (BUSINESS_RULE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EVENT_SCHEDULE
  2  	    ADD  ( CONSTRAINT EMA_R_35
  3  		   FOREIGN KEY (EVENT_ID)
  4  				  REFERENCES EMA_EVENT
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EVENT_TYPE_MAP
  2  	    ADD  ( CONSTRAINT EMA_BUSINESS_RULE_TYPE_2
  3  		   FOREIGN KEY (BUSINESS_RULE_TYPE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE_TYPE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION
  2  	    ADD  ( CONSTRAINT EMA_R_51
  3  		   FOREIGN KEY (APPLICATION_NAME)
  4  				  REFERENCES EMA_APPLICATION
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION
  2  	    ADD  ( CONSTRAINT EMA_R_42
  3  		   FOREIGN KEY (ENTERPRISE_NAME)
  4  				  REFERENCES EMA_ENTERPRISE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION_ESCALATION
  2  	    ADD  ( CONSTRAINT EMA_R_22
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_EXCEPTION
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION_LIFECYCLE
  2  	    ADD  ( CONSTRAINT EMA_EXCEPTION_1
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_EXCEPTION
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION_RESPONSE
  2  	    ADD  ( CONSTRAINT EMA_R_38
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_EXCEPTION
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION_VIEWED
  2  	    ADD  ( CONSTRAINT EMA_R_21
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_EXCEPTION
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXCEPTION_VIEWED
  2  	    ADD  ( CONSTRAINT EMA_R_5
  3  		   FOREIGN KEY (USER_ID)
  4  				  REFERENCES EMA_USER
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_EXT_USER_RULE_ACCESS
  2  	    ADD  ( CONSTRAINT EMA_BUSINESS_RULE_2
  3  		   FOREIGN KEY (BUSINESS_RULE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_GROUP
  2  	    ADD  ( CONSTRAINT EMA_R_27
  3  		   FOREIGN KEY (ENTERPRISE_NAME)
  4  				  REFERENCES EMA_ENTERPRISE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_GROUP_RULE_ACCESS
  2  	    ADD  ( CONSTRAINT EMA_R_24
  3  		   FOREIGN KEY (BUSINESS_RULE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_GROUP_RULE_ACCESS
  2  	    ADD  ( CONSTRAINT EMA_R_23
  3  		   FOREIGN KEY (GROUP_ID)
  4  				  REFERENCES EMA_GROUP
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_RESPONSE_ARCHIVE
  2  	    ADD  ( CONSTRAINT EMA_R_41
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_EXCEPTION_ARCHIVE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_RULE_RESOLUTION
  2  	    ADD  ( CONSTRAINT EMA_RULE_TYPE_RESOLUTION_1
  3  		   FOREIGN KEY (OPTION_ID)
  4  				  REFERENCES EMA_RULE_TYPE_RESOLUTION
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_RULE_RESOLUTION
  2  	    ADD  ( CONSTRAINT EMA_BUSINESS_RULE_1
  3  		   FOREIGN KEY (BUSINESS_RULE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_RULE_TYPE_RESOLUTION
  2  	    ADD  ( CONSTRAINT EMA_BUSINESS_RULE_TYPE_1
  3  		   FOREIGN KEY (BUSINESS_RULE_TYPE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE_TYPE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER
  2  	    ADD  ( CONSTRAINT EMA_R_25
  3  		   FOREIGN KEY (ENTERPRISE_NAME)
  4  				  REFERENCES EMA_ENTERPRISE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_GROUP
  2  	    ADD  ( CONSTRAINT EMA_R_29
  3  		   FOREIGN KEY (GROUP_ID)
  4  				  REFERENCES EMA_GROUP
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_GROUP
  2  	    ADD  ( CONSTRAINT EMA_R_28
  3  		   FOREIGN KEY (USER_ID)
  4  				  REFERENCES EMA_USER
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_NOTIFICATION
  2  	    ADD  ( CONSTRAINT EMA_R_4
  3  		   FOREIGN KEY (USER_ID)
  4  				  REFERENCES EMA_USER
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_NOTIFICATION
  2  	    ADD  ( CONSTRAINT EMA_R_3
  3  		   FOREIGN KEY (PRIORITY_ID)
  4  				  REFERENCES EMA_PRIORITY
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_RULE_ACCESS
  2  	    ADD  ( CONSTRAINT EMA_R_8
  3  		   FOREIGN KEY (USER_ID)
  4  				  REFERENCES EMA_USER
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_RULE_ACCESS
  2  	    ADD  ( CONSTRAINT EMA_R_7
  3  		   FOREIGN KEY (BUSINESS_RULE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_STATUS_EXCEP_ARCHIVE
  2  	    ADD  ( CONSTRAINT EMA_EXCEPTION_ARCHIVE_1
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_EXCEPTION_ARCHIVE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_STATUS_EXCEPTION
  2  	    ADD  ( CONSTRAINT EMA_EXCEPTION_2
  3  		   FOREIGN KEY (EXCEPTION_ID)
  4  				  REFERENCES EMA_EXCEPTION
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_SUBSCRIPTION
  2  	    ADD  ( CONSTRAINT EMA_R_2
  3  		   FOREIGN KEY (USER_ID)
  4  				  REFERENCES EMA_USER
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> ALTER TABLE EMA_USER_SUBSCRIPTION
  2  	    ADD  ( CONSTRAINT EMA_R_1
  3  		   FOREIGN KEY (BUSINESS_RULE_ID)
  4  				  REFERENCES EMA_BUSINESS_RULE
  5  				  ON DELETE CASCADE ) ;

Table altered.

SQL> 
SQL> 
SQL> 
SQL> --
SQL> --  Copyright 2002-2003, Manugistics, Inc.
SQL> --  All Rights Reserved
SQL> --
SQL> /************************************************************************************
SQL> 
SQL> 	Oracle
SQL> 
SQL> 	post_script.sql
SQL> 
SQL> 	To create triggers:
SQL> 	EMA_EVENT - utI_EMA_EVENT
SQL> 	EMA_BUSINESS_RULE - utU1_EMA_BUSINESS_RULE,
SQL> 			    utD_EMA_BUSINESS_RULE_STMT
SQL> 	tU_EMA_APPLICATION
SQL> 
SQL> 	utU1_EMA_PRIORITY -  update ema_exception.priority_name when ema_priority.name
SQL> 			     is changed.
SQL> 
SQL> ************************************************************************************/
SQL> --
SQL> --  EMA_EVENT
SQL> --
SQL> CREATE OR REPLACE TRIGGER utI_EMA_EVENT AFTER INSERT ON EMA_EVENT FOR EACH ROW
  2  DECLARE
  3    CURSOR crBUSINESS_RULE(EnterpriseNM VARCHAR2,
  4  			      ApplicationNM VARCHAR2,
  5  			      BusinessRuleType VARCHAR2) IS
  6  	 SELECT a.BUSINESS_RULE_ID
  7  	   FROM EMA_BUSINESS_RULE a, EMA_BUSINESS_RULE_TYPE b
  8  	   WHERE a.ENTERPRISE_NAME = EnterpriseNM AND
  9  		 a.BUSINESS_RULE_TYPE_ID = b.BUSINESS_RULE_TYPE_ID AND
 10  		 b.APPLICATION_NAME = ApplicationNM AND
 11  		 b.NAME = BusinessRuleType;
 12  
 13  BEGIN
 14    FOR EachRec IN crBUSINESS_RULE (:new.ENTERPRISE_NAME,
 15  				       :new.APPLICATION_NAME,
 16  				       :new.BUSINESS_RULE_TYPE) LOOP
 17  	     INSERT INTO EMA_EVENT_SCHEDULE (EVENT_ID, BUSINESS_RULE_ID)
 18  		VALUES (:new.EVENT_ID, EachRec.BUSINESS_RULE_ID);
 19  
 20    END LOOP;
 21  
 22  EXCEPTION
 23    WHEN OTHERS THEN
 24  	 raise_application_error(
 25  	      -20500,
 26  	     'Cannot INSERT EMA_EVENT because errors in the trigger utI_EMA_EVENT.'
 27  	   );
 28  
 29  END utI_EMA_EVENT;
 30  /

Trigger created.

SQL> 
SQL> 
SQL> 
SQL> CREATE OR REPLACE TRIGGER utU1_EMA_BUSINESS_RULE AFTER UPDATE ON EMA_BUSINESS_RULE FOR EACH ROW
  2  BEGIN
  3    --  Update EMA_EXCEPTION.BUSINESS_RULE_NAME if the NAME of the business rule changes.
  4    IF  :old.NAME <> :new.NAME THEN
  5  	 UPDATE EMA_EXCEPTION
  6  	   SET
  7  	     EMA_EXCEPTION.BUSINESS_RULE_NAME = :new.NAME
  8  	   WHERE
  9  	     EMA_EXCEPTION.BUSINESS_RULE_NAME = :old.NAME AND
 10  	     EMA_EXCEPTION.ENTERPRISE_NAME = :old.ENTERPRISE_NAME;
 11    END IF;
 12  END utU1_EMA_BUSINESS_RULE;
 13  /

Trigger created.

SQL> 
SQL> --  Delete from EMA_EXCEPTION table when (BUSINESS_RULE_NAME, ENTERPRISE_NAME) is deleted
SQL> CREATE OR REPLACE TRIGGER	utD_EMA_BUSINESS_RULE_STMT AFTER DELETE ON EMA_BUSINESS_RULE
  2  BEGIN
  3    DELETE FROM EMA_EXCEPTION
  4  	 WHERE BUSINESS_RULE_NAME IS NOT NULL AND
  5  	       (ENTERPRISE_NAME, BUSINESS_RULE_NAME) NOT IN (
  6  		SELECT ENTERPRISE_NAME, NAME
  7  		  FROM EMA_BUSINESS_RULE);
  8  END utD_EMA_BUSINESS_RULE_STMT;
  9  /

Trigger created.

SQL> 
SQL> -- Create a function to find the difference between two input dates in minutes
SQL> CREATE OR REPLACE FUNCTION date_diff(iDate1 IN DATE, iDate2 IN DATE)
  2  RETURN NUMBER
  3  IS diff NUMBER(19,2);
  4  BEGIN
  5    diff := (iDate1 -iDate2) * 1440;
  6    RETURN (diff);
  7  END date_diff;
  8  /

Function created.

SQL> 
SQL> 
SQL> -- Update-cascade trigger
SQL> -- EMA_ENTERPRISE
SQL> 
SQL> create or replace trigger tU_EMA_ENTERPRISE after UPDATE on EMA_ENTERPRISE for each row
  2  -- ERwin Builtin Mon Jun 17 15:57:51 2002
  3  -- UPDATE trigger on EMA_ENTERPRISE
  4  declare numrows INTEGER;
  5  begin
  6    /* ERwin Builtin Mon Jun 17 15:57:51 2002 */
  7    /* EMA_ENTERPRISE EMA_R/42 EMA_EXCEPTION ON PARENT UPDATE CASCADE */
  8    if
  9  	 /* %JoinPKPK(:%Old,:%New," <> "," or ") */
 10  	 :old.ENTERPRISE_NAME <> :new.ENTERPRISE_NAME
 11    then
 12  	 update EMA_EXCEPTION
 13  	   set
 14  	     /*  %JoinFKPK(EMA_EXCEPTION,:%New," = ",",") */
 15  	     EMA_EXCEPTION.ENTERPRISE_NAME = :new.ENTERPRISE_NAME
 16  	   where
 17  	     /*  %JoinFKPK(EMA_EXCEPTION,:%Old," = "," and") */
 18  	     EMA_EXCEPTION.ENTERPRISE_NAME = :old.ENTERPRISE_NAME;
 19    end if;
 20  
 21    /* ERwin Builtin Mon Jun 17 15:57:51 2002 */
 22    /* EMA_ENTERPRISE EMA_R/27 EMA_GROUP ON PARENT UPDATE CASCADE */
 23    if
 24  	 /* %JoinPKPK(:%Old,:%New," <> "," or ") */
 25  	 :old.ENTERPRISE_NAME <> :new.ENTERPRISE_NAME
 26    then
 27  	 update EMA_GROUP
 28  	   set
 29  	     /*  %JoinFKPK(EMA_GROUP,:%New," = ",",") */
 30  	     EMA_GROUP.ENTERPRISE_NAME = :new.ENTERPRISE_NAME
 31  	   where
 32  	     /*  %JoinFKPK(EMA_GROUP,:%Old," = "," and") */
 33  	     EMA_GROUP.ENTERPRISE_NAME = :old.ENTERPRISE_NAME;
 34    end if;
 35  
 36    /* ERwin Builtin Mon Jun 17 15:57:51 2002 */
 37    /* EMA_ENTERPRISE EMA_R/25 EMA_USER ON PARENT UPDATE CASCADE */
 38    if
 39  	 /* %JoinPKPK(:%Old,:%New," <> "," or ") */
 40  	 :old.ENTERPRISE_NAME <> :new.ENTERPRISE_NAME
 41    then
 42  	 update EMA_USER
 43  	   set
 44  	     /*  %JoinFKPK(EMA_USER,:%New," = ",",") */
 45  	     EMA_USER.ENTERPRISE_NAME = :new.ENTERPRISE_NAME
 46  	   where
 47  	     /*  %JoinFKPK(EMA_USER,:%Old," = "," and") */
 48  	     EMA_USER.ENTERPRISE_NAME = :old.ENTERPRISE_NAME;
 49    end if;
 50  
 51    /* ERwin Builtin Mon Jun 17 15:57:51 2002 */
 52    /* EMA_ENTERPRISE EMA_R/17 EMA_BUSINESS_RULE ON PARENT UPDATE CASCADE */
 53    if
 54  	 /* %JoinPKPK(:%Old,:%New," <> "," or ") */
 55  	 :old.ENTERPRISE_NAME <> :new.ENTERPRISE_NAME
 56    then
 57  	 update EMA_BUSINESS_RULE
 58  	   set
 59  	     /*  %JoinFKPK(EMA_BUSINESS_RULE,:%New," = ",",") */
 60  	     EMA_BUSINESS_RULE.ENTERPRISE_NAME = :new.ENTERPRISE_NAME
 61  	   where
 62  	     /*  %JoinFKPK(EMA_BUSINESS_RULE,:%Old," = "," and") */
 63  	     EMA_BUSINESS_RULE.ENTERPRISE_NAME = :old.ENTERPRISE_NAME;
 64    end if;
 65  
 66    /* ERwin Builtin Mon Jun 17 15:57:51 2002 */
 67    /* EMA_ENTERPRISE EMA_R/12 EMA_EVENT ON PARENT UPDATE CASCADE */
 68    if
 69  	 /* %JoinPKPK(:%Old,:%New," <> "," or ") */
 70  	 :old.ENTERPRISE_NAME <> :new.ENTERPRISE_NAME
 71    then
 72  	 update EMA_EVENT
 73  	   set
 74  	     /*  %JoinFKPK(EMA_EVENT,:%New," = ",",") */
 75  	     EMA_EVENT.ENTERPRISE_NAME = :new.ENTERPRISE_NAME
 76  	   where
 77  	     /*  %JoinFKPK(EMA_EVENT,:%Old," = "," and") */
 78  	     EMA_EVENT.ENTERPRISE_NAME = :old.ENTERPRISE_NAME;
 79    end if;
 80  
 81  -- ERwin Builtin Mon Jun 17 15:57:51 2002
 82  end;
 83  /

Trigger created.

SQL> 
SQL> 
SQL> create or replace trigger tI_EMA_EXCEPTION after INSERT on EMA_EXCEPTION for each row
  2  --  add a record to ema_exception_lifecycle
  3  begin
  4    insert into ema_exception_lifecycle (exception_id, RESOLUTION_NOTIFICATION_TIME)
  5  	 values (:new.exception_id, :new.TIME_CREATED);
  6  end;
  7  /

Trigger created.

SQL> show error
No errors.
SQL> 
SQL> 
SQL> --
SQL> create or replace trigger tU_EMA_APPLICATION
  2    BEFORE UPDATE OF
  3  	      APPLICATION_NAME
  4    on EMA_APPLICATION
  5  
  6    for each row
  7  /* ERwin Builtin Tue Oct 07 13:08:13 2003 */
  8  /* default body for tU_EMA_APPLICATION */
  9  declare numrows INTEGER;
 10  begin
 11  
 12  /* ERwin Builtin Tue Oct 07 13:08:13 2003 */
 13    /* EMA_APPLICATION EMA_R/51 EMA_EXCEPTION ON PARENT UPDATE CASCADE */
 14    if
 15  	 /* :old.APPLICATION_NAME <> :new.APPLICATION_NAME */
 16  	 :old.APPLICATION_NAME <> :new.APPLICATION_NAME
 17    then
 18  	 update EMA_EXCEPTION
 19  	   set
 20  	     /*  EMA_EXCEPTION.APPLICATION_NAME = :new.APPLICATION_NAME */
 21  	     EMA_EXCEPTION.APPLICATION_NAME = :new.APPLICATION_NAME
 22  	   where
 23  	     /*  EMA_EXCEPTION.APPLICATION_NAME = :old.APPLICATION_NAME */
 24  	     EMA_EXCEPTION.APPLICATION_NAME = :old.APPLICATION_NAME;
 25    end if;
 26  
 27  /* ERwin Builtin Tue Oct 07 13:08:13 2003 */
 28    /* EMA_APPLICATION EMA_R/53 EMA_BUSINESS_RULE_TYPE ON PARENT UPDATE CASCADE */
 29    if
 30  	 /* :old.APPLICATION_NAME <> :new.APPLICATION_NAME */
 31  	 :old.APPLICATION_NAME <> :new.APPLICATION_NAME
 32    then
 33  	 update EMA_BUSINESS_RULE_TYPE
 34  	   set
 35  	     /*  EMA_BUSINESS_RULE_TYPE.APPLICATION_NAME = :new.APPLICATION_NAME */
 36  	     EMA_BUSINESS_RULE_TYPE.APPLICATION_NAME = :new.APPLICATION_NAME
 37  	   where
 38  	     /*  EMA_BUSINESS_RULE_TYPE.APPLICATION_NAME = :old.APPLICATION_NAME */
 39  	     EMA_BUSINESS_RULE_TYPE.APPLICATION_NAME = :old.APPLICATION_NAME;
 40    end if;
 41  
 42  /* ERwin Builtin Tue Oct 07 13:08:13 2003 */
 43    /* EMA_APPLICATION EMA_R/52 EMA_EVENT ON PARENT UPDATE CASCADE */
 44    if
 45  	 /* :old.APPLICATION_NAME <> :new.APPLICATION_NAME */
 46  	 :old.APPLICATION_NAME <> :new.APPLICATION_NAME
 47    then
 48  	 update EMA_EVENT
 49  	   set
 50  	     /*  EMA_EVENT.APPLICATION_NAME = :new.APPLICATION_NAME */
 51  	     EMA_EVENT.APPLICATION_NAME = :new.APPLICATION_NAME
 52  	   where
 53  	     /*  EMA_EVENT.APPLICATION_NAME = :old.APPLICATION_NAME */
 54  	     EMA_EVENT.APPLICATION_NAME = :old.APPLICATION_NAME;
 55    end if;
 56  
 57  
 58  end;
 59  /

Trigger created.

SQL> 
SQL> show error
No errors.
SQL> 
SQL> CREATE OR REPLACE TRIGGER utU1_EMA_PRIORITY AFTER UPDATE ON EMA_PRIORITY FOR EACH ROW
  2  BEGIN
  3    --  Update EMA_EXCEPTION.PRIORITY_NAME if the NAME of the priority changes.
  4    IF  :old.NAME <> :new.NAME THEN
  5  	   UPDATE EMA_EXCEPTION
  6  	   SET
  7  	     EMA_EXCEPTION.PRIORITY_NAME = :new.NAME
  8  	   WHERE
  9  	     EMA_EXCEPTION.PRIORITY_NAME = :old.NAME;
 10    END IF;
 11  END utU1_EMA_PRIORITY;
 12  /

Trigger created.

SQL> 
SQL> show error
No errors.
SQL> 
SQL> 
SQL> @EMA_UDA_Management.sql
SQL> -------------------------------------------------------------------
SQL> --- This script is used to create the UDA Management Package ---
SQL> --- that contains the stored procedures needed to manage the ---
SQL> --- verify, insert and delete.				  ---
SQL> -------------------------------------------------------------------
SQL> CREATE OR REPLACE PACKAGE EMA_UDA_MANAGEMENT_PKG
  2  AS
  3  	FUNCTION blobtoclob (l_blob IN BLOB)
  4  	   RETURN CLOB;
  5  
  6  	PROCEDURE checkudcreferences (
  7  	   retval		 OUT	  VARCHAR2,
  8  	   ret_businessrule	 OUT	  VARCHAR2,
  9  	   p_schema_name	 IN	  VARCHAR2,
 10  	   p_table_name 	 IN	  VARCHAR2,
 11  	   p_column_name	 IN	  VARCHAR2
 12  	);
 13  END EMA_UDA_MANAGEMENT_PKG;
 14  /

Package created.

SQL> 
SQL> SHOW errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PACKAGE BODY EMA_UDA_MANAGEMENT_PKG
  2  AS
  3  	 FUNCTION blobtoclob(l_blob in blob)
  4  	 RETURN clob
  5  	 IS
  6  	 l_clob 		     clob;
  7  	 l_amount	     integer;
  8  	 l_clob_offset	     integer := 1;
  9  	 l_blob_offset	     integer := 1;
 10  	 l_blob_csid	     number := dbms_lob.default_csid;
 11  	 l_lang_context      integer := dbms_lob.default_lang_ctx;
 12  	 l_warning	     integer;
 13  	 conv_warn	     exception;
 14  	 BEGIN
 15  	     dbms_lob.createtemporary(l_clob, true);
 16  	     l_amount := dbms_lob.getlength(l_blob);
 17  	     dbms_lob.converttoclob(l_clob,l_blob,l_amount,l_clob_offset,l_blob_offset,l_blob_csid,l_lang_context,l_warning);
 18  	     if l_warning != dbms_lob.no_warning then
 19  		 raise conv_warn;
 20  	     end if;
 21  	     return l_clob;
 22  	     dbms_lob.freetemporary(l_clob);
 23  	 EXCEPTION
 24  	     when conv_warn
 25  	     then
 26  	     dbms_output.put_line ('Characters in source cannot be properly converted');
 27  	     when others
 28  	     then
 29  	     dbms_output.put_line (sqlerrm);
 30  	 END blobtoclob;
 31  
 32  	PROCEDURE checkudcreferences (
 33  	   retval		 OUT	  VARCHAR2,
 34  	   ret_businessrule	 OUT	  VARCHAR2,
 35  	   p_schema_name	 IN	  VARCHAR2,
 36  	   p_table_name 	 IN	  VARCHAR2,
 37  	   p_column_name	 IN	  VARCHAR2
 38  	)
 39  	IS
 40  	   v_tmp_cnt	       number;
 41  	   v_found_reference   number := 0;
 42  	BEGIN
 43  
 44  	v_tmp_cnt := 0;
 45  	retval := '#@#@#@';
 46  	ret_businessrule := '#@#@#@';
 47  
 48  /******************************************************************************************/
 49  /* Check EMA_BUSINESS_RULE Record. If a record exists in this table for the input values,	*/
 50  /* then we should not proceed with any deletes	    */
 51  /******************************************************************************************/
 52  	 declare
 53  	 l_search_str1 varchar2(32000) := '^(.)*<schemaName>(.)*<casefulString>'||p_schema_name||'</casefulString>(.)*</schemaName>(.)*<columnName>(.)*<casefulString>'||
 54  	   p_column_name||'</casefulString>(.)*</columnName>(.)*<tableName>(.)*<casefulString>'||p_table_name||'</casefulString>(.)*</tableName>(.)*$';
 55  	 l_search_str2 varchar2(32000) := '^(.)*<schemaName>(.)*<casefulString>'||p_schema_name||'</casefulString>(.)*</schemaName>(.)*<tableName>(.)*<casefulString>'||
 56  	 p_table_name||'</casefulString>(.)*</tableName>(.)*<returnedColumnNames(.)*<casefulString>'||p_column_name||'</casefulString>(.)*</returnedColumnNames>(.)*$';
 57  	 begin
 58  	     for cur in (select ebrt.description, ebr.enterprise_name, ebr.name, ebr.xml
 59  			 from ema_business_rule_type ebrt inner join ema_business_rule ebr
 60  			 on ebrt.business_rule_type_id = ebr.business_rule_type_id
 61  			 where upper(ebrt.application_name) not in ('TRANSPORT', 'WEBWORKS')
 62  			 and ebr.xml is not null
 63  			 and (regexp_like (blobtoclob(xml), l_search_str1, 'mn') or regexp_like (blobtoclob(xml), l_search_str2, 'mn')))
 64  	     loop
 65  		 ret_businessrule := ret_businessrule || cur.name || '->' || cur.enterprise_name || '->' || nvl(cur.description, '---') || '#@#@#@';
 66  		 v_found_reference := 1;
 67  	     end loop;
 68  	 exception
 69  	     when others
 70  	     then
 71  	     dbms_output.put_line (sqlerrm);
 72  	 end;
 73  
 74  	   IF v_found_reference = 0
 75  	   THEN
 76  	      retval := '#@#@#@NO_UDC_REFERENCES#@#@#@';
 77  	      ret_businessrule := '#@#@#@NO_UDC_REFERENCES#@#@#@';
 78  	   END IF;
 79  
 80  	   DBMS_OUTPUT.put_line (retval);
 81  	END checkudcreferences;
 82  
 83  END EMA_UDA_MANAGEMENT_PKG;
 84  /

Package body created.

SQL> 
SQL> SHOW errors;
No errors.
SQL> 
SQL> /***********************************************************************
SQL> *									    *
SQL> *	 This script will do the following:				    *
SQL> *	   1. Create Monitor users for all CSM users			    *
SQL> *	   2. Populate Application data 				    *
SQL> *	   3. Populate Hierarchy data					    *
SQL> *	   4. Create Monitor business rule types			    *
SQL> *									    *
SQL> ***********************************************************************/
SQL> 
SQL> --
SQL> -- Add version info for database schema
SQL> --
SQL> 	INSERT INTO EMA_SCHEMA_LOG (NAME, VALUE, LOG_DATE)
  2  	  VALUES ('DATABASE_VERSION', '2016.1.0.0', SYSDATE);

1 row created.

SQL> 
SQL> --
SQL> -- Add default hierarchies
SQL> --
SQL> 	INSERT INTO EMA_HIERARCHY (HIERARCHY_ID, NAME, DESCRIPTION, ORDERED_LIST)
  2  	  VALUES (1,  'by_Priority', 'Exceptions sorted by Priority', 'Priority_Name');

1 row created.

SQL> 	INSERT INTO EMA_HIERARCHY (HIERARCHY_ID, NAME, DESCRIPTION, ORDERED_LIST)
  2  	  VALUES (2,  'by_Business_Process', 'Exceptions sorted by Business Process', 'Application_Name');

1 row created.

SQL> 	INSERT INTO EMA_HIERARCHY (HIERARCHY_ID, NAME, DESCRIPTION, ORDERED_LIST)
  2  	  VALUES (3,  'by_Business_Rule_Type', 'Exceptions sorted by Business Rule Type', 'Business_Rule_Type');

1 row created.

SQL> 	INSERT INTO EMA_HIERARCHY (HIERARCHY_ID, NAME, DESCRIPTION, ORDERED_LIST)
  2  	  VALUES (4,  'by_Priority_and_Business_Process', 'Exceptions sorted by Priority and Business Process', 'Priority_Name;Application_Name');

1 row created.

SQL> 	INSERT INTO EMA_HIERARCHY (HIERARCHY_ID, NAME, DESCRIPTION, ORDERED_LIST)
  2  	  VALUES (5,  'by_Priority_and_Business_Rule_Type', 'Exceptions sorted by Priority and Business Rule Type', 'Priority_Name;Business_Rule_Type');

1 row created.

SQL> 	INSERT INTO EMA_HIERARCHY (HIERARCHY_ID, NAME, DESCRIPTION, ORDERED_LIST)
  2  	  VALUES (6,  'by_Category_and_Entity', 'Exceptions sorted by Category Name and Entity', 'Category_Name;Entity');

1 row created.

SQL> 	INSERT INTO EMA_HIERARCHY (HIERARCHY_ID, NAME, DESCRIPTION, ORDERED_LIST)
  2  	  VALUES (7,  'by_Category_Priority_and_Entity', 'Exceptions sorted by Category Name, Priority and Entity', 'Category_Name;Priority_Name;Entity');

1 row created.

SQL> 	INSERT INTO EMA_HIERARCHY (HIERARCHY_ID, NAME, DESCRIPTION, ORDERED_LIST)
  2  	  VALUES (8,  'by_Category_Priority_and_Business_Rule_Type', 'Exceptions sorted by Category Name, Priority and Business Rule Type', 'Category_Name;Priority_Name;Business_Rule_Type');

1 row created.

SQL> 	INSERT INTO EMA_HIERARCHY (HIERARCHY_ID, NAME, DESCRIPTION, ORDERED_LIST)
  2  	  VALUES (9,  'by_Category_Priority_Entity_and_Business_Rule_Type', 'Exceptions sorted by Category Name, Priority, Entity and Business Rule Type', 'Category_Name;Priority_Name;Entity;Business_Rule_Type');

1 row created.

SQL> 
SQL> --
SQL> -- Add Monitor Application
SQL> --
SQL> 	INSERT INTO EMA_APPLICATION (APPLICATION_NAME)
  2  	  VALUES ('Monitor');

1 row created.

SQL> 	INSERT INTO EMA_APPLICATION (APPLICATION_NAME)
  2  	  VALUES ('WebWORKS');

1 row created.

SQL> 
SQL> --
SQL> -- Add Monitor business rule types
SQL> --
SQL> 	INSERT INTO EMA_BUSINESS_RULE_TYPE (BUSINESS_RULE_TYPE_ID, APPLICATION_NAME, NAME, DESCRIPTION,
  2  		    IS_EVENT, CLASS_NAME, RESOURCE_FILE_NAME, SUPPORTS_AGING, SUPPORTS_COPY,
  3  		    PROVIDES_COPY )
  4  	  VALUES (1, 'Monitor', 'DataComparison', 'Monitor Data Comparison Rule', 0, 'com.manu.monitor.implementation.EMADataComparisonRule',
  5  		  'MonitorClientResource', 1, 1, 0);

1 row created.

SQL> 	INSERT INTO EMA_BUSINESS_RULE_TYPE (BUSINESS_RULE_TYPE_ID, APPLICATION_NAME, NAME, DESCRIPTION,
  2  		    IS_EVENT, CLASS_NAME, RESOURCE_FILE_NAME, SUPPORTS_AGING, SUPPORTS_COPY,
  3  		    PROVIDES_COPY )
  4  	  VALUES (2, 'WebWORKS', 'UserStatus', 'User Status Rule', 1, 'com.manu.monitor.implementation.EMAUserStatusRule',
  5  		  'MonitorClientResource', 0, 1, 0);

1 row created.

SQL> 
SQL> --
SQL> -- CES Event Type to Business Rule Type map
SQL> --
SQL> 	INSERT INTO EMA_EVENT_TYPE_MAP (BUSINESS_RULE_TYPE_ID, EVENT_TYPE, EVENT_SOURCE)
  2  	  VALUES (2, 'INVALID_LOGIN_ATTEMPT', 'csa.audit');

1 row created.

SQL> 	INSERT INTO EMA_EVENT_TYPE_MAP (BUSINESS_RULE_TYPE_ID, EVENT_TYPE, EVENT_SOURCE)
  2  	  VALUES (2, 'USER_ACCOUNT_LOCKED', 'csa.audit');

1 row created.

SQL> 
SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> --SPOOL OFF;
SQL> 
SQL> SET ECHO OFF
Disconnected from Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production

SQL*Plus: Release 12.1.0.2.0 Production on Mon Oct 9 15:04:09 2017

Copyright (c) 1982, 2014, Oracle.  All rights reserved.

Last Successful login time: Mon Oct 09 2017 14:47:41 +05:30

Connected to:
Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production

09-OCT-17
USER is "SYSTEM"


==========================================================================================================
Grants Application Schema object privileges to the Foundation schema owner WWFMGR.
This script should be run each time a JDA product is added to
the database. Please enter the user name below that owns the JDA product schema. This script may
have to be run multiple times if you install multiple products in your database. This script can be run
for the same schema owner multiple times without harm. Do NOT enter WWFMGR.
==========================================================================================================

List of Schema Owners
------------------------------
XS$NULL
SYSKM
SYSDG
SYSBACKUP
EMAMGR
SCPOMGR
SCPOREFOSM
WWFSCPOREFOSM
ABPPMGR
WWFREFOSM
EMAREFOSM
EMAWWFREFOSM
OJVMSYS
GSMCATUSER
ANONYMOUS
XDB
APPQOSSYS
ORACLE_OCM
DIP
GSMUSER
GSMADMIN_INTERNAL
AUDSYS

Processing schema emamgr..
Dropping previous role manu_emamgr
Creating role manu_emamgr
Granting permission on application schema objects...
GRANT EXECUTE ON WWFMGR.sre_nodecontrol TO emamgr
                        *


Disconnected from Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production

SQL*Plus: Release 12.1.0.2.0 Production on Mon Oct 9 15:04:16 2017

Copyright (c) 1982, 2014, Oracle.  All rights reserved.

Last Successful login time: Mon Oct 09 2017 14:48:24 +05:30

Connected to:
Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production

SQL> SET FEEDBACK ON
SQL> 
SQL> SPOOL ema_populate_wwf.log
SQL> SHOW USER
USER is "WWFMGR"
SQL> SELECT TO_CHAR(SYSDATE, 'DD-MON-YY HH24:MI:SS') "RIGHT NOW"  FROM DUAL;

RIGHT NOW
---------------------------
09-OCT-17 15:04:16

1 row selected.

SQL> 
SQL> DECLARE
  2  
  3   CURSOR crCSM_ENTERPRISE IS
  4  	 SELECT ENTERPRISE_NAME, ENTERPRISE_ID, ENTERPRISE_LEVEL, PARENT_ID, HERITAGE
  5  	   FROM CSM_ENTERPRISE;
  6  
  7    CURSOR crCSM_USER IS
  8  	 SELECT USER_NAME, ENTERPRISE_NAME
  9  	   FROM CSM_USER;
 10  
 11  BEGIN
 12  --
 13  --  Add EMA_ENTERPRISE records for all CSM_ENTERPRISE records
 14  --
 15    FOR EachRec IN crCSM_ENTERPRISE LOOP
 16  	   INSERT INTO EMAMGR.EMA_ENTERPRISE (ENTERPRISE_NAME, ENTERPRISE_ID, ENTERPRISE_LEVEL, PARENT_ID, HERITAGE)
 17  	     VALUES (Eachrec.ENTERPRISE_NAME, Eachrec.ENTERPRISE_ID, Eachrec.ENTERPRISE_LEVEL, Eachrec.PARENT_ID, Eachrec.HERITAGE);
 18    END LOOP;
 19  
 20  --
 21  --  Add EMA_USER records for all CSM_USER records
 22  --
 23    FOR EachRec IN crCSM_USER LOOP
 24  	   INSERT INTO EMAMGR.EMA_USER (USER_ID, USER_NAME, ENTERPRISE_NAME)
 25  	     VALUES (EMAMGR.EMA_USER_SEQ.NEXTVAL, Eachrec.USER_NAME, EachRec.ENTERPRISE_NAME);
 26    END LOOP;
 27  
 28  END;
 29  /

PL/SQL procedure successfully completed.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> 
SQL> DECLARE
  2   vCount NUMBER := 0;
  3  
  4  BEGIN
  5  
  6  --
  7  -- Add Monitor application
  8  --
  9  	SELECT COUNT(*) INTO vCount
 10  	  FROM CSM_APPLICATION
 11  	  WHERE APPLICATION_NAME = 'Monitor';
 12  
 13  	IF vCount = 0 THEN
 14  	   INSERT INTO CSM_APPLICATION (APPLICATION_NAME, URL, DISPLAY_NAME, CONFIG_FILE_NAME, MBEAN_CLASS_NAME, SCHEMA_NAME)
 15  	     VALUES ('Monitor', '/monitor/ControllerServlet', 'Monitor', 'monitor_config.xml', 'com.manu.monitor.system.EMACacheRefreshConfig', 'EMAMGR');
 16  	END IF;
 17  
 18  END;
 19  /

PL/SQL procedure successfully completed.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> --
SQL> -- Add permission info - entities
SQL> --
SQL> 	INSERT INTO CSM_ENTITY_INFO (ENTITY_NAME, DESCRIPTION, SUPPORTS_FILTERS, RSRC_BUNDLE_NAME)
  2  	  VALUES ('EMA_PRIORITY', NULL, 0, 'MonitorClientResource');

1 row created.

SQL> 	INSERT INTO CSM_ENTITY_INFO (ENTITY_NAME, DESCRIPTION, SUPPORTS_FILTERS, RSRC_BUNDLE_NAME)
  2  	  VALUES ('EMA_BUSINESS_RULE', NULL, 0, 'MonitorClientResource');

1 row created.

SQL> 	INSERT INTO CSM_ENTITY_INFO (ENTITY_NAME, DESCRIPTION, SUPPORTS_FILTERS, RSRC_BUNDLE_NAME)
  2  	  VALUES ('EMA_GROUP', NULL, 0, 'MonitorClientResource');

1 row created.

SQL> 	INSERT INTO CSM_ENTITY_INFO (ENTITY_NAME, DESCRIPTION, SUPPORTS_FILTERS, RSRC_BUNDLE_NAME)
  2  	  VALUES ('EMA_EXCEPTION_RESPONSE', NULL, 0, 'MonitorClientResource');

1 row created.

SQL> 
SQL> 	INSERT INTO CSM_ENTITY_APP (ENTITY_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_PRIORITY', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_ENTITY_APP (ENTITY_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_BUSINESS_RULE', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_ENTITY_APP (ENTITY_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_GROUP', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_ENTITY_APP (ENTITY_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_EXCEPTION_RESPONSE', 'Monitor');

1 row created.

SQL> 
SQL> --
SQL> -- Add permission info - features
SQL> --
SQL> 	INSERT INTO CSM_FEATURE_INFO (FEATURE_NAME, DESCRIPTION)
  2  	  VALUES ('Monitor', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_INFO (FEATURE_NAME, DESCRIPTION)
  2  	  VALUES ('EMA_RESOLVE_EXCEPTION', 'Resolve Exceptions');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_INFO (FEATURE_NAME, DESCRIPTION)
  2  	  VALUES ('EMA_SUBSCRIBE_BUSINESS_RULE', 'Subscribe to Business Rules');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_INFO (FEATURE_NAME, DESCRIPTION)
  2  	  VALUES ('EMA_VIEW_HISTORY', 'View Notification History');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_INFO (FEATURE_NAME, DESCRIPTION)
  2  	  VALUES ('EMA_VIEW_HISTORY_DETAILS', 'View Notification History Details');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_INFO (FEATURE_NAME, DESCRIPTION)
  2  	  VALUES ('EMA_MANUAL_ESCALATION', 'Escalate Exceptions');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_INFO (FEATURE_NAME, DESCRIPTION)
  2  	  VALUES ('EMA_RELOAD_PROPERTY', 'Reload Properties or Templates');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_INFO (FEATURE_NAME, DESCRIPTION)
  2  	  VALUES ('EMA_RULE_PROCESS_STATUS', 'Business Rule Process Status');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_INFO (FEATURE_NAME, DESCRIPTION)
  2  	  VALUES ('EMA_EXPORT_EXCEPTION', 'Export Exceptions');

1 row created.

SQL> 
SQL> 	INSERT INTO CSM_FEATURE_APP (FEATURE_NAME, APPLICATION_NAME)
  2  	  VALUES ('Monitor', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_APP (FEATURE_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_RESOLVE_EXCEPTION', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_APP (FEATURE_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_SUBSCRIBE_BUSINESS_RULE', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_APP (FEATURE_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_VIEW_HISTORY', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_APP (FEATURE_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_VIEW_HISTORY_DETAILS', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_APP (FEATURE_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_MANUAL_ESCALATION', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_APP (FEATURE_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_RELOAD_PROPERTY', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_APP (FEATURE_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_RULE_PROCESS_STATUS', 'Monitor');

1 row created.

SQL> 	INSERT INTO CSM_FEATURE_APP (FEATURE_NAME, APPLICATION_NAME)
  2  	  VALUES ('EMA_EXPORT_EXCEPTION', 'Monitor');

1 row created.

SQL> 
SQL> --
SQL> -- Add permission resources
SQL> --
SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_GROUP', 'ENTITY', NULL, NULL, 'EMA_GROUP', NULL, NULL, NULL,
  5  		  'MonitorClientResource', 1, 1, 1, 1, 0);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_PRIORITY', 'ENTITY', NULL, NULL, 'EMA_PRIORITY', NULL, NULL, NULL,
  5  		  'MonitorClientResource', 1, 1, 1, 1, 0);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_BUSINESS_RULE', 'ENTITY', NULL, NULL, 'EMA_BUSINESS_RULE', NULL, NULL, NULL,
  5  		  'MonitorClientResource', 1, 1, 1, 1, 1);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_EXCEPTION_RESPONSE', 'ENTITY', NULL, NULL, 'EMA_EXCEPTION_RESPONSE', NULL, NULL, NULL,
  5  		  'MonitorClientResource', 1, 1, 0, 0, 0);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('Monitor', 'FEATURE', NULL, NULL, NULL, NULL, NULL, 'Monitor',
  5  		  'MonitorClientResource', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_SUBSCRIBE_BUSINESS_RULE', 'FEATURE', NULL, NULL, NULL, NULL, NULL,
  5  		  'EMA_SUBSCRIBE_BUSINESS_RULE', 'MonitorClientResource', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_RESOLVE_EXCEPTION', 'FEATURE', NULL, NULL, NULL, NULL, NULL,
  5  		  'EMA_RESOLVE_EXCEPTION', 'MonitorClientResource', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_MANUAL_ESCALATION', 'FEATURE', NULL, NULL, NULL, NULL, NULL,
  5  		  'EMA_MANUAL_ESCALATION', 'MonitorClientResource', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_VIEW_HISTORY', 'FEATURE', NULL, NULL, NULL, NULL, NULL,
  5  		  'EMA_VIEW_HISTORY', 'MonitorClientResource', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_VIEW_HISTORY_DETAILS', 'FEATURE', NULL, NULL, NULL, NULL, NULL,
  5  		  'EMA_VIEW_HISTORY_DETAILS', 'MonitorClientResource', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_RELOAD_PROPERTY', 'FEATURE', NULL, NULL, NULL, NULL, NULL,
  5  		  'EMA_RELOAD_PROPERTY', 'MonitorClientResource', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_RULE_PROCESS_STATUS', 'FEATURE', NULL, NULL, NULL, NULL, NULL,
  5  		  'EMA_RULE_PROCESS_STATUS', 'MonitorClientResource', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_RESOURCE (RESOURCE_NAME, RESOURCE_TYPE, SCHEMA_NAME, DESCRIPTION,
  2  				  ENTITY_NAME, TABLE_NAME, COLUMN_NAME, FEATURE_NAME, RSRC_BUNDLE_NAME,
  3  				  CREATE_OP, READ_OP, UPDATE_OP, DELETE_OP, EXECUTE_OP)
  4  	  VALUES ('EMA_EXPORT_EXCEPTION', 'FEATURE', NULL, NULL, NULL, NULL, NULL,
  5  		  'EMA_EXPORT_EXCEPTION', 'MonitorClientResource', 0, 0, 0, 0, 1);

1 row created.

SQL> 
SQL> --
SQL> -- Add Monitor permissions to CSM roles.
SQL> --
SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'Monitor', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_BUSINESS_RULE', 1, 1, 1, 1, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_GROUP', 1, 1, 1, 1, 0);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_PRIORITY', 1, 1, 1, 1, 0);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_EXCEPTION_RESPONSE', 1, 1, 0, 0, 0);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_SUBSCRIBE_BUSINESS_RULE', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME,  CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_RESOLVE_EXCEPTION', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_MANUAL_ESCALATION', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_VIEW_HISTORY', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_VIEW_HISTORY_DETAILS', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_RELOAD_PROPERTY', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_RULE_PROCESS_STATUS', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (100, 'EMA_EXPORT_EXCEPTION', 0, 0, 0, 0, 1);

1 row created.

SQL> 
SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'Monitor', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'EMA_BUSINESS_RULE', 1, 1, 1, 1, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'EMA_GROUP', 1, 1, 1, 1, 0);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'EMA_EXCEPTION_RESPONSE', 1, 1, 0, 0, 0);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'EMA_SUBSCRIBE_BUSINESS_RULE', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'EMA_RESOLVE_EXCEPTION', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'EMA_MANUAL_ESCALATION', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'EMA_VIEW_HISTORY', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'EMA_VIEW_HISTORY_DETAILS', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'EMA_RULE_PROCESS_STATUS', 0, 0, 0, 0, 1);

1 row created.

SQL> 	INSERT INTO CSM_ACCESS_CONTROL (ROLE_ID, RESOURCE_NAME, CREATE_ACCESS,
  2  					READ_ACCESS, UPDATE_ACCESS, DELETE_ACCESS, EXECUTE_ACCESS)
  3  	  VALUES (102, 'EMA_EXPORT_EXCEPTION', 0, 0, 0, 0, 1);

1 row created.

SQL> 
SQL> --
SQL> -- Catalog Listing
SQL> --
SQL> 	INSERT INTO VP_CATALOG_LISTING (LISTING_NAME, DISPLAY_NAME, APPLICATION_NAME, LISTING_TYPE, URL,
  2  					LAUNCHABLE, CUST_INST_ALLOWED, CUST_INST_UPDATE,
  3  					FEATURE_NAME, CATALOG_GROUPING, RSRC_BUNDLE_NAME)
  4  	  VALUES ('Monitor', 'Exception_Summary', 'Monitor', 'PAGE',
  5  		  '{APP_PATH}?frame=exceptionSummary', 1, 0, 0, 'Monitor',
  6  		  '!Monitor', 'MonitorClientResource');

1 row created.

SQL> 	INSERT INTO VP_CATALOG_LISTING (LISTING_NAME, DISPLAY_NAME, APPLICATION_NAME, LISTING_TYPE, URL,
  2  					LAUNCHABLE, CUST_INST_ALLOWED, CUST_INST_UPDATE,
  3  					FEATURE_NAME, CATALOG_GROUPING, RSRC_BUNDLE_NAME)
  4  	  VALUES ('MonitorBusinessRuleStatus', 'Rule_Process_Status', 'Monitor', 'PAGE',
  5  		  '{APP_PATH}?frame=ruleProcessStatus', 1, 0, 0, 'Monitor',
  6  		  '!Monitor', 'MonitorClientResource');

1 row created.

SQL> 	INSERT INTO VP_CATALOG_LISTING (LISTING_NAME, DISPLAY_NAME, APPLICATION_NAME, LISTING_TYPE, URL,
  2  					LAUNCHABLE, CUST_INST_ALLOWED, CUST_INST_UPDATE,
  3  					FEATURE_NAME, CATALOG_GROUPING, RSRC_BUNDLE_NAME)
  4  	  VALUES ('MonitorBusinessRuleAdmin', 'Business_Rule_Administration', 'Monitor', 'PAGE',
  5  		  '{APP_PATH}?frame=businessRuleMgr', 1, 0, 0, 'Monitor',
  6  		  '!Monitor!Administration', 'MonitorClientResource');

1 row created.

SQL> 	INSERT INTO VP_CATALOG_LISTING (LISTING_NAME, DISPLAY_NAME, APPLICATION_NAME, LISTING_TYPE, URL,
  2  					LAUNCHABLE, CUST_INST_ALLOWED, CUST_INST_UPDATE,
  3  					FEATURE_NAME, CATALOG_GROUPING, RSRC_BUNDLE_NAME)
  4  	  VALUES ('MonitorGroupAdmin', 'Group_Administration', 'Monitor', 'PAGE',
  5  		  '{APP_PATH}?frame=groupMgr', 1, 0, 0, 'Monitor',
  6  		  '!Monitor!Administration', 'MonitorClientResource');

1 row created.

SQL> 	INSERT INTO VP_CATALOG_LISTING (LISTING_NAME, DISPLAY_NAME, APPLICATION_NAME, LISTING_TYPE, URL,
  2  					LAUNCHABLE, CUST_INST_ALLOWED, CUST_INST_UPDATE,
  3  					FEATURE_NAME, CATALOG_GROUPING, RSRC_BUNDLE_NAME)
  4  	  VALUES ('MonitorPriorityAdmin', 'Priority_Administration', 'Monitor', 'PAGE',
  5  		  '{APP_PATH}?frame=priorityAdmin', 1, 0, 0, 'Monitor',
  6  		  '!Monitor!Administration', 'MonitorClientResource');

1 row created.

SQL> 	INSERT INTO VP_CATALOG_LISTING (LISTING_NAME, DISPLAY_NAME, APPLICATION_NAME, LISTING_TYPE, URL,
  2  					LAUNCHABLE, CUST_INST_ALLOWED, CUST_INST_UPDATE, HIDDEN,
  3  					FEATURE_NAME, CATALOG_GROUPING, RSRC_BUNDLE_NAME)
  4  	  VALUES ('MonitorExceptionDetails', 'Exception_Details', 'Monitor', 'PAGE',
  5  		  '{APP_PATH}?frame=exceptionDetails', 0, 0, 0, 1, 'Monitor',
  6  		  '!Monitor', 'MonitorClientResource');

1 row created.

SQL> 	INSERT INTO VP_CATALOG_LISTING (LISTING_NAME, DISPLAY_NAME, APPLICATION_NAME, LISTING_TYPE, URL,
  2  					LAUNCHABLE, CUST_INST_ALLOWED, CUST_INST_UPDATE, HIDDEN,
  3  					FEATURE_NAME, CATALOG_GROUPING, RSRC_BUNDLE_NAME)
  4  	  VALUES ('MonitorBusinessRuleExceptions', 'Exceptions_For_Rule', 'Monitor', 'PAGE',
  5  		  '{APP_PATH}?frame=exceptionsForRule', 0, 0, 0, 1, 'Monitor',
  6  		  '!Monitor', 'MonitorClientResource');

1 row created.

SQL> 
SQL> --
SQL> -- Preferences
SQL> --
SQL> 	INSERT INTO VP_USERSETTINGS (SEQNUM, APPLICATION_NAME, DISPLAYNAME_KEY, URL, FEATURE_NAME, RSRC_BUNDLE_NAME)
  2  	  VALUES (1, 'Monitor', 'Monitor', '{APP_PATH}ControllerServlet?frame=preferences' ,'Monitor', 'MonitorClientResource');

1 row created.

SQL> 
SQL> --
SQL> -- CES Subscriptions
SQL> --
SQL> 	INSERT INTO CSM_SUBSCRIBER (SUBSCRIBER_ID) VALUES ('monitor.event');

1 row created.

SQL> 	INSERT INTO CSM_SUBSCRIBER (SUBSCRIBER_ID) VALUES ('monitor.CSAEventSubscriber');

1 row created.

SQL> 	INSERT INTO CSM_SUBSCRIBER (SUBSCRIBER_ID) VALUES ('monitor.crs');

1 row created.

SQL> 
SQL> 	INSERT INTO CSM_SUBSCRIPTION (SUBSCRIBER_ID, EVENT_SOURCE)
  2  	  VALUES ('monitor.CSAEventSubscriber', 'csa.audit');

1 row created.

SQL> 	INSERT INTO CSM_SUBSCRIPTION (SUBSCRIBER_ID, EVENT_SOURCE, EVENT_TYPE)
  2  	  VALUES ('monitor.crs', 'crs', 'refresh_property_file_cache');

1 row created.

SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> 
SQL> --  Remove the synonyms
SQL> --  Drop all the private synonyms for Monitor objects whose name begins with EMA_.
SQL> DECLARE
  2    vCount NUMBER(1) :=0;
  3    vStr VARCHAR2(255);
  4    CURSOR crSeq IS
  5  	 SELECT SYNONYM_NAME
  6  	   FROM USER_SYNONYMS
  7  	   WHERE SUBSTR(SYNONYM_NAME, 1, 4) = 'EMA_';
  8  BEGIN
  9    FOR EachRec IN crSeq LOOP
 10  	   vStr := 'DROP SYNONYM ' || EachRec.SYNONYM_NAME;
 11  	   EXECUTE IMMEDIATE vStr;
 12  	   DBMS_OUTPUT.PUT_LINE('Dropped synonym ' || EachRec.SYNONYM_NAME);
 13    END LOOP;
 14  END;
 15  /
Dropped synonym EMA_UDA_MANAGEMENT_PKG

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> --SCH725326:Schema for the creation of System Properties table
SQL> 
SQL> INSERT INTO SYSTEM_PROPERTIES_METADATA(APPLICATION_NAME,RESOURCE_BUNDLE)  VALUES('Monitor','MonitorConfigResourceBundle');
INSERT INTO SYSTEM_PROPERTIES_METADATA(APPLICATION_NAME,RESOURCE_BUNDLE)  VALUES('Monitor','MonitorConfigResourceBundle')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','license','monitorInstalled','yes','licenseKey.desc',1,'','');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','license','monitorInstalled','yes','licenseKey.desc',1,'','')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','trace','extremelyVerboseTracing','false','extremelyVerboseTracing.desc',0,'validDataType','boolean');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','trace','extremelyVerboseTracing','false','extremelyVerboseTracing.desc',0,'validDataType','boolean')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','archive','archiveExceptions','false','archiveExceptions.desc',0,'validDataType','boolean');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','archive','archiveExceptions','false','archiveExceptions.desc',0,'validDataType','boolean')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','notificationOutput','email','notificationOutput.desc',0,'validEnum','file|email|fileandemail');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','notificationOutput','email','notificationOutput.desc',0,'validEnum','file|email|fileandemail')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','defaultNotificationUser','System','defaultNotificationUser.desc',0,'','');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','defaultNotificationUser','System','defaultNotificationUser.desc',0,'','')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','notificationSleepMinutes','5','notificationSleepMinutes.desc',0,'validRange','1|');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','notificationSleepMinutes','5','notificationSleepMinutes.desc',0,'validRange','1|')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','applicationUrlPrefix','http://IN21022285LT:7001','applicationUrlPrefix.desc',0,'','');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','applicationUrlPrefix','http://IN21022285LT:7001','applicationUrlPrefix.desc',0,'','')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','showResolutionPath','true','showResolutionPath.desc',0,'validDataType','boolean');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','showResolutionPath','true','showResolutionPath.desc',0,'validDataType','boolean')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','enableNotificationProcess','true','enableNotificationProcess.desc',0,'validDataType','boolean');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','notification','enableNotificationProcess','true','enableNotificationProcess.desc',0,'validDataType','boolean')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','scheduler','schedulerSleepMinutes','5','schedulerSleepMinutes.desc',0,'validRange','1|');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','scheduler','schedulerSleepMinutes','5','schedulerSleepMinutes.desc',0,'validRange','1|')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','scheduler','enableSchedulerProcess','true','enableSchedulerProcess.desc',0,'validDataType','boolean');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','scheduler','enableSchedulerProcess','true','enableSchedulerProcess.desc',0,'validDataType','boolean')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','resolution','autoResolutionSleepMinutes','5','autoResolutionSleepMinutes.desc',0,'validRange','1|');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','resolution','autoResolutionSleepMinutes','5','autoResolutionSleepMinutes.desc',0,'validRange','1|')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','resolution','enableResolutionProcess','true','enableResolutionProcess.desc',0,'validDataType','boolean');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','resolution','enableResolutionProcess','true','enableResolutionProcess.desc',0,'validDataType','boolean')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','history','showHistory','true','showHistory.desc',0,'validDataType','boolean');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','history','showHistory','true','showHistory.desc',0,'validDataType','boolean')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','history','showHistoryDetail','true','showHistoryDetail.desc',0,'validDataType','boolean');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','history','showHistoryDetail','true','showHistoryDetail.desc',0,'validDataType','boolean')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','maximumException','maximumExceptionCount','1000','maximumExceptionCount.desc',0,'validRange','1|1000');
INSERT INTO SYSTEM_PROPERTIES(APPLICATION_NAME,CATEGORY,PROPERTY_NAME,PROPERTY_VALUE,DESCRIPTION_KEY,RESTART_SERVER,DATA_TYPE,VALID_VALUES)  VALUES('Monitor','maximumException','maximumExceptionCount','1000','maximumExceptionCount.desc',0,'validRange','1|1000')
            *
ERROR at line 1:
ORA-00942: table or view does not exist


SQL> 
SQL> --SCH725326:Schema for the creation of System Properties table
SQL> 
SQL> -- MET802937:  [DBCR] Meta data scripts related to MCM support for Business Rule enhancement issues
SQL> 
SQL> INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_BUSINESS_RULE', 0, 0, 0, 1, 1, 1, 0, 1);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_BUSINESS_RULE_ESCALATION', 0, 0, 0, 1, 0, 1, 1, 1);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_BUSINESS_RULE_TEMPLATE', 0, 0, 0, 1, 0, 1, 1, 1);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_GROUP_RULE_ACCESS', 0, 0, 0, 1, 0, 1, 1, 1);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_USER_RULE_ACCESS', 0, 0, 0, 1, 0, 1, 1, 1);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_USER_SUBSCRIPTION', 0, 0, 0, 1, 0, 1, 0, 1);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_EXT_USER_RULE_ACCESS', 0, 0, 0, 1, 0, 1, 1, 1);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_USER', 0, 0, 0, 1, 0, 1, 0, 1);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_PRIORITY', 0, 0, 0, 1, 1, 1, 0, 1);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_GROUP', 0, 0, 0, 1, 1, 1, 0, 1);

1 row created.

SQL> 
SQL>  INSERT INTO MD_TABLE_INFO (SCHEMA_NAME, TABLE_NAME, SYSTEM_TABLE, IS_USER_DEFINED,
  2  	     IS_TIME_ALLOCATABLE, IS_CONFIGURED, IS_USER_UPDATEABLE, IS_MONITOR_ENABLED, USE_SCHEMA_PK, IS_FE_ENABLED)
  3   VALUES (upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 0, 0, 0, 1, 1, 1, 0, 1);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES ('EMA_BUSINESS_RULE_1', upper('EMAMGR'), 'EMA_BUSINESS_RULE_ESCALATION', upper('EMAMGR'), 'EMA_BUSINESS_RULE',
  5  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_3', upper('EMAMGR'), 'EMA_BUSINESS_RULE_TEMPLATE', upper('EMAMGR'), 'EMA_BUSINESS_RULE',
  6  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES ('EMA_BUSINESS_RULE_5', upper('EMAMGR'), 'EMA_GROUP_RULE_ACCESS', upper('EMAMGR'), 'EMA_BUSINESS_RULE',
  5  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES ('EMA_BUSINESS_RULE_6', upper('EMAMGR'), 'EMA_USER_RULE_ACCESS', upper('EMAMGR'), 'EMA_BUSINESS_RULE',
  5  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_7', upper('EMAMGR'), 'EMA_USER_SUBSCRIPTION', upper('EMAMGR'), 'EMA_BUSINESS_RULE',
  6  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_8', upper('EMAMGR'), 'EMA_EXT_USER_RULE_ACCESS', upper('EMAMGR'), 'EMA_BUSINESS_RULE',
  6  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_PRIORITY', upper('EMAMGR'), 'EMA_BUSINESS_RULE', upper('EMAMGR'), 'EMA_PRIORITY',
  6  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_TYPE_ID', upper('EMAMGR'), 'EMA_BUSINESS_RULE', upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE',
  6  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES
  5  	('EMA_GROUP_RULE_ACCESS_GROUP', upper('EMAMGR'), 'EMA_GROUP_RULE_ACCESS', upper('EMAMGR'), 'EMA_GROUP',
  6  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES
  5  	('EMA_USER', upper('EMAMGR'), 'EMA_USER', upper('EMAMGR'), 'EMA_USER',
  6  	 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES
  5  	('EMA_USER_RULE_ACCESS_USER', upper('EMAMGR'), 'EMA_USER_RULE_ACCESS', upper('EMAMGR'), 'EMA_USER',
  6  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION
  2  	(RELATION_NAME, FROM_SCHEMA_NAME, FROM_TABLE_NAME, TO_SCHEMA_NAME, TO_TABLE_NAME,
  3  	 CARDINALITY, IS_PRIMARY_RELATION, IS_SEARCH_RELATION)
  4   VALUES
  5  	('EMA_USER_SUBSCRIPTION_USER', upper('EMAMGR'), 'EMA_USER_SUBSCRIPTION', upper('EMAMGR'), 'EMA_USER',
  6  	 2, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_1', 0, upper('EMAMGR'), 'EMA_BUSINESS_RULE_ESCALATION', upper('EMAMGR'),
  6  	 'EMA_BUSINESS_RULE', 'BUSINESS_RULE_ID', 'BUSINESS_RULE_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_3', 0, upper('EMAMGR'), 'EMA_BUSINESS_RULE_TEMPLATE', upper('EMAMGR'),
  6  	 'EMA_BUSINESS_RULE', 'BUSINESS_RULE_ID', 'BUSINESS_RULE_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_5', 0, upper('EMAMGR'), 'EMA_GROUP_RULE_ACCESS', upper('EMAMGR'),
  6  	 'EMA_BUSINESS_RULE', 'BUSINESS_RULE_ID', 'BUSINESS_RULE_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_6', 0, upper('EMAMGR'), 'EMA_USER_RULE_ACCESS', upper('EMAMGR'),
  6  	 'EMA_BUSINESS_RULE', 'BUSINESS_RULE_ID', 'BUSINESS_RULE_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_7', 0, upper('EMAMGR'), 'EMA_USER_SUBSCRIPTION', upper('EMAMGR'),
  6  	 'EMA_BUSINESS_RULE', 'BUSINESS_RULE_ID', 'BUSINESS_RULE_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_8', 0, upper('EMAMGR'), 'EMA_EXT_USER_RULE_ACCESS', upper('EMAMGR'),
  6  	 'EMA_BUSINESS_RULE', 'BUSINESS_RULE_ID', 'BUSINESS_RULE_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_PRIORITY', 0, upper('EMAMGR'), 'EMA_BUSINESS_RULE', upper('EMAMGR'),
  6  	 'EMA_PRIORITY', 'PRIORITY_ID', 'PRIORITY_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_BUSINESS_RULE_TYPE_ID', 0, upper('EMAMGR'), 'EMA_BUSINESS_RULE', upper('EMAMGR'),
  6  	 'EMA_BUSINESS_RULE_TYPE', 'BUSINESS_RULE_TYPE_ID', 'BUSINESS_RULE_TYPE_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_GROUP_RULE_ACCESS_GROUP', 0, upper('EMAMGR'), 'EMA_GROUP_RULE_ACCESS', upper('EMAMGR'),
  6  	 'EMA_GROUP', 'GROUP_ID', 'GROUP_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_USER', 0, upper('EMAMGR'), 'EMA_USER', upper('EMAMGR'),
  6  	 'EMA_USER', 'USER_ID', 'USER_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_USER_RULE_ACCESS_USER', 0, upper('EMAMGR'), 'EMA_USER_RULE_ACCESS', upper('EMAMGR'),
  6  	 'EMA_USER', 'USER_ID', 'USER_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_TABLE_RELATION_JOIN
  2  	(RELATION_NAME, JOIN_ORDER, FROM_SCHEMA_NAME, FROM_TABLE, TO_SCHEMA_NAME,
  3  	 TO_TABLE, FROM_COLUMN_1, TO_COLUMN_1)
  4   VALUES
  5  	('EMA_USER_SUBSCRIPTION_USER', 0, upper('EMAMGR'), 'EMA_USER_SUBSCRIPTION', upper('EMAMGR'),
  6  	 'EMA_USER', 'USER_ID', 'USER_ID');

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'XML', 1, -1,
  7  	 0, 0, 'TEXT', 1, 0,
  8  	 0, 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SEQ_NAME, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'BUSINESS_RULE_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 0, 0, 'EMA_BUSINESS_RULE_SEQ', 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'PRIORITY_ID', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'SUBJECT', 1, -1,
  7  	 0, 0, 'TEXT', 1, 0,
  8  	 0, 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'NAME', 1, -1,
  7  	 0, 0, 'TEXT', 1, 0,
  8  	 0, 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'DESCRIPTION', 1, -1,
  7  	 0, 0, 'TEXT', 1, 0,
  8  	 0, 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'IS_AGED', 1, -1,
  7  	 0, 0, 'INTEGER', 1, 0,
  8  	 0, 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'ACTIVITY_TYPE', 1, -1,
  7  	 0, 0, 'INTEGER', 1, 0,
  8  	 0, 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'LAST_NOTIFICATION_TIME', 1, -1,
  7  	 0, 0, 'DATETIME', 1, 0,
  8  	 0, 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'IS_NOTIFICATION_ONLY', 1, -1,
  7  	 0, 0, 'INTEGER', 1, 0,
  8  	 0, 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'SYNCHRONIZE', 1, -1,
  7  	 0, 0, 'INTEGER', 1, 0,
  8  	 0, 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'AUTO_RESOLUTION_EMAIL', 1, -1,
  7  	 0, 0, 'INTEGER', 1, 0,
  8  	 0, 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'AUTO_RESOLUTION_OPTION_ID', 1, -1,
  7  	 0, 0, 'INTEGER', 1, 0,
  8  	 0, 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'NOTIFICATION_TYPE', 1, -1,
  7  	 0, 0, 'INTEGER', 1, 0,
  8  	 0, 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'IS_REAL_TIME', 1, -1,
  7  	 0, 0, 'INTEGER', 1, 0,
  8  	 0, 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'BUSINESS_RULE_TYPE_ID', 1, -1,
  7  	 0, 0, 'INTEGER', 1, 0,
  8  	 0, 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'SERVER', 1, -1,
  7  	 0, 0, 'TEXT', 1, 0,
  8  	 0, 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'CATEGORY_NAME', 1, -1,
  7  	 0, 0, 'TEXT', 1, 0,
  8  	 0, 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, CONFIG_CODE,
  3  	 IS_USER_DEFINED, IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED,
  4  	 IS_USER_INSERTABLE, IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE', 'ENTERPRISE_NAME', 1, -1,
  7  	 0, 0, 'TEXT', 1, 0,
  8  	 0, 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_EXT_USER_RULE_ACCESS', 'BUSINESS_RULE_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_EXT_USER_RULE_ACCESS', 'EMAIL', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_EXT_USER_RULE_ACCESS', 'DELAY_MINUTES', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_EXT_USER_RULE_ACCESS', 'DELAY_UNIT', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_EXT_USER_RULE_ACCESS', 'FORMAT', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_EXT_USER_RULE_ACCESS', 'TIME_CREATED', 1, 0,
  7  	 0, 'DATETIME', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_GROUP_RULE_ACCESS', 'BUSINESS_RULE_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_GROUP_RULE_ACCESS', 'DELAY_MINUTES', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_GROUP_RULE_ACCESS', 'GROUP_ID', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_GROUP_RULE_ACCESS', 'DELAY_UNIT', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER_RULE_ACCESS', 'BUSINESS_RULE_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER_RULE_ACCESS', 'USER_ID', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER_RULE_ACCESS', 'DELAY_MINUTES', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER_RULE_ACCESS', 'DELAY_UNIT', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER_SUBSCRIPTION', 'BUSINESS_RULE_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SEQ_NAME, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER_SUBSCRIPTION', 'USER_SUBSCRIPTION_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 0, 0, 'EMA_USER_SUBSCRIPTION_SEQ', 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER_SUBSCRIPTION', 'USER_ID', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER_SUBSCRIPTION', 'TIME_CREATED', 1, 0,
  7  	 0, 'DATETIME', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TEMPLATE', 'BUSINESS_RULE_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TEMPLATE', 'FORMAT', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TEMPLATE', 'TEMPLATE_NAME', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_ESCALATION', 'BUSINESS_RULE_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_ESCALATION', 'ESCALATION_TARGET', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_ESCALATION', 'DELAY', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_ESCALATION', 'LOOKUP_USER', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_ESCALATION', 'DEFAULT_FORMAT', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_ESCALATION', 'DELAY_UNIT', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SEQ_NAME, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_GROUP', 'GROUP_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 0, 0, 'EMA_GROUP_SEQ', 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_GROUP', 'ENTERPRISE_NAME', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_GROUP', 'NAME', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_GROUP', 'DESCRIPTION', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SEQ_NAME, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER', 'USER_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 0, 0, 'EMA_USER_SEQ', 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER', 'USER_NAME', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_USER', 'ENTERPRISE_NAME', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SEQ_NAME, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_PRIORITY', 'PRIORITY_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 0, 0, 'EMA_PRIORITY_SEQ', 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_PRIORITY', 'NAME', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_PRIORITY', 'DESCRIPTION', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_PRIORITY', 'PRIORITY_ORDER', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 'APPLICATION_NAME', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 'NAME', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 1, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SEQ_NAME, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 'BUSINESS_RULE_TYPE_ID', 1, 0,
  7  	 0, 'SEQUENCE', 1, 0, 0,
  8  	 0, 0, 'EMA_BUSINESS_RULE_TYPE_SEQ', 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 'IS_EVENT', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 'DESCRIPTION', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 'CLASS_NAME', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 'RESOURCE_FILE_NAME', 1, 0,
  7  	 0, 'TEXT', 1, 0, 0,
  8  	 0, 1, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 'SUPPORTS_AGING', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 'SUPPORTS_COPY', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> INSERT INTO MD_COLUMN_INFO
  2  	(SCHEMA_NAME, TABLE_NAME, COLUMN_NAME, SUPPORTS_FILTERS, IS_USER_DEFINED,
  3  	 IS_USER_UPDATEABLE, LOGICAL_DATA_TYPE_NAME, IS_CONFIGURED, IS_USER_REQUIRED, IS_USER_INSERTABLE,
  4  	 IS_PK, IS_NULLABLE, SYSTEM_COLUMN)
  5   VALUES
  6  	(upper('EMAMGR'), 'EMA_BUSINESS_RULE_TYPE', 'PROVIDES_COPY', 1, 0,
  7  	 0, 'INTEGER', 1, 0, 0,
  8  	 0, 0, 0);

1 row created.

SQL> 
SQL> -- MET802937:  [DBCR] Meta data scripts related to MCM support for Business Rule enhancement issues
SQL> 
SQL> 
SQL> SET ESCAPE ON
SQL> SET ESCAPE "\\"
SQL> 
SQL> UPDATE vp_catalog_listing
  2  	SET url =
  3  	       DECODE (INSTR (url, '?'),
  4  		       0, url || '?JDA_SINGLETON',
  5  		       url || '\&JDA_SINGLETON')
  6  WHERE application_name = 'Monitor';

7 rows updated.

SQL> 
SQL> set escape off
SQL> 
SQL> COMMIT;

Commit complete.

SQL> 
SQL> SET ECHO OFF
Disconnected from Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production

SQL*Plus: Release 12.1.0.2.0 Production on Mon Oct 9 15:04:17 2017

Copyright (c) 1982, 2014, Oracle.  All rights reserved.

Last Successful login time: Mon Oct 09 2017 15:04:16 +05:30

Connected to:
Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production

SQL> set feedback on
SQL> 
SQL> DECLARE
  2  CNT NUMBER := 0;
  3  BEGIN
  4  SELECT count(*) into cnt FROM user_triggers WHERE trigger_name LIKE 'TRG_PTCH_RLBK_AUD_%';
  5  If cnt=0 then
  6  execute immediate 'CREATE OR REPLACE PACKAGE pkg_ptch_rlbk
  7  AS
  8  	PROCEDURE ins_rlbk_vldn_stmt (v_ddl_or_dml	  IN VARCHAR2,
  9  				      v_rlbk_stmt	  IN CLOB,
 10  								      v_refresh_trig_y_n      IN VARCHAR2 default null,
 11  								      v_refresh_tab_name      IN VARCHAR2 default null,
 12  				      v_login_schema	  IN VARCHAR2 default null,
 13  				      v_rlbk_key_stmt	  IN CLOB default null,
 14  				      v_validation_stmt   IN CLOB default null,
 15  				      v_key_val_stmt	  IN CLOB default null,
 16  				      v_gtt_ins_stmt	  IN CLOB default null,
 17  								      v_object_name	  IN VARCHAR2 default null,
 18  				      v_gtt_object_name   IN VARCHAR2 default null);
 19  END pkg_ptch_rlbk;';
 20  
 21  execute immediate 'CREATE OR REPLACE PACKAGE BODY pkg_ptch_rlbk
 22  AS
 23  	PROCEDURE ins_rlbk_vldn_stmt (v_ddl_or_dml	  IN VARCHAR2,
 24  				      v_rlbk_stmt	  IN CLOB,
 25  								      v_refresh_trig_y_n      IN VARCHAR2 default null,
 26  								      v_refresh_tab_name      IN VARCHAR2 default null,
 27  				      v_login_schema	  IN VARCHAR2 default null,
 28  				      v_rlbk_key_stmt	  IN CLOB default null,
 29  				      v_validation_stmt   IN CLOB default null,
 30  				      v_key_val_stmt	  IN CLOB default null,
 31  				      v_gtt_ins_stmt	  IN CLOB default null,
 32  								      v_object_name	  IN VARCHAR2 default null,
 33  				      v_gtt_object_name   IN VARCHAR2 default null)
 34  	AS
 35  	BEGIN
 36  	  NULL;
 37  	END;
 38  END pkg_ptch_rlbk;';
 39  END If;
 40  END;
 41  /

PL/SQL procedure successfully completed.

SQL> 
SQL> spool monitor_foundation_patches.log
SQL> 
SQL> SHOW USER
USER is "WWFMGR"
SQL> SELECT SYSDATE FROM DUAL;

SYSDATE
---------
09-OCT-17

1 row selected.

SQL> 
SQL> DEFINE monitor_schema = &1
SQL> 
SQL> DECLARE
  2  patch_exists	NUMBER;
  3  db_patch_level &&monitor_schema..EMA_SCHEMA_LOG.VALUE%TYPE;
  4  db_patch_name VARCHAR2(255);
  5  webworks_schema MD_TABLE_INFO.SCHEMA_NAME%TYPE;
  6  
  7  BEGIN
  8  	patch_exists := 0;
  9  	db_patch_name := 'MONITOR_WWF_DB_201610_PATCH';
 10  
 11  	SELECT user into webworks_schema FROM dual;
 12  
 13  -- Use the following as a template for writing any database patches
 14  
 15  ----------------------------------------------------------------------------------------------------------
 16  -- Case: XXXXXXX
 17  -- Patch Label: PXXXXXXX.201610
 18  -- Description: Provide meaningful description
 19  /*
 20  -- Specify the patch that you are trying to apply
 21  	db_patch_level := 'PXXXXXXX.201610';
 22  
 23  -- Check if the patch exists. If patch exists do not run the patch.
 24  	SELECT count(*) INTO patch_exists FROM &&monitor_schema..EMA_SCHEMA_LOG WHERE NAME = db_patch_name AND VALUE = db_patch_level;
 25  
 26  -- If patch_exists is 0, then this patch is not available on the database, so apply it.
 27  	if patch_exists = 0 then
 28  
 29  	   -- Actual patch changes should be written here.
 30  
 31  	   -- Log an entry to EMA_SCHEMA_LOG so that next time around we will not apply the patch
 32  	      INSERT INTO &&monitor_schema..EMA_SCHEMA_LOG (NAME, VALUE, LOG_DATE, DESCRIPTION, LINE)
 33  	      VALUES (db_patch_name, db_patch_level, SYSDATE,
 34  		   'Database Patch ' || db_patch_level || ' applied.', 1);
 35  
 36  	      COMMIT;
 37  	end if;
 38  */
 39  ----------------------------------------------------------------------------------------------------------
 40  
 41  
 42  EXCEPTION
 43  	WHEN OTHERS
 44  	THEN
 45  	   ROLLBACK;
 46  	   DBMS_OUTPUT.put_line ('EXCEPTION OCCURED WHILE APPLYING PATCH.');
 47  	   DBMS_OUTPUT.put_line ('DATABASE IS NOT AT THE LATEST PATCH LEVEL');
 48  END;
 49  
 50  /
old   3: db_patch_level &&monitor_schema..EMA_SCHEMA_LOG.VALUE%TYPE;
new   3: db_patch_level emamgr.EMA_SCHEMA_LOG.VALUE%TYPE;
old  24:    SELECT count(*) INTO patch_exists FROM &&monitor_schema..EMA_SCHEMA_LOG WHERE NAME = db_patch_name AND VALUE = db_patch_level;
new  24:    SELECT count(*) INTO patch_exists FROM emamgr.EMA_SCHEMA_LOG WHERE NAME = db_patch_name AND VALUE = db_patch_level;
old  32:	  INSERT INTO &&monitor_schema..EMA_SCHEMA_LOG (NAME, VALUE, LOG_DATE, DESCRIPTION, LINE)
new  32:	  INSERT INTO emamgr.EMA_SCHEMA_LOG (NAME, VALUE, LOG_DATE, DESCRIPTION, LINE)

PL/SQL procedure successfully completed.

SQL> 
SQL> spool off
SQL> 
SQL> DECLARE
  2  CNT NUMBER := 0;
  3  BEGIN
  4  SELECT count(*) into cnt FROM user_triggers WHERE trigger_name LIKE 'TRG_PTCH_RLBK_AUD_%';
  5  If cnt=0 then
  6  execute immediate 'DROP PACKAGE pkg_ptch_rlbk';
  7  END If;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> exit
Disconnected from Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production

SQL*Plus: Release 12.1.0.2.0 Production on Mon Oct 9 15:04:19 2017

Copyright (c) 1982, 2014, Oracle.  All rights reserved.

Last Successful login time: Mon Oct 09 2017 15:04:05 +05:30

Connected to:
Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production

SQL> set feedback on
SQL> 
SQL> DECLARE
  2  CNT NUMBER := 0;
  3  BEGIN
  4  SELECT count(*) into cnt FROM user_triggers WHERE trigger_name LIKE 'TRG_PTCH_RLBK_AUD_%';
  5  If cnt=0 then
  6  execute immediate 'CREATE OR REPLACE PACKAGE pkg_ptch_rlbk
  7  AS
  8  	PROCEDURE ins_rlbk_vldn_stmt (v_ddl_or_dml	  IN VARCHAR2,
  9  				      v_rlbk_stmt	  IN CLOB,
 10  								      v_refresh_trig_y_n      IN VARCHAR2 default null,
 11  								      v_refresh_tab_name      IN VARCHAR2 default null,
 12  				      v_login_schema	  IN VARCHAR2 default null,
 13  				      v_rlbk_key_stmt	  IN CLOB default null,
 14  				      v_validation_stmt   IN CLOB default null,
 15  				      v_key_val_stmt	  IN CLOB default null,
 16  				      v_gtt_ins_stmt	  IN CLOB default null,
 17  								      v_object_name	  IN VARCHAR2 default null,
 18  				      v_gtt_object_name   IN VARCHAR2 default null);
 19  END pkg_ptch_rlbk;';
 20  
 21  execute immediate 'CREATE OR REPLACE PACKAGE BODY pkg_ptch_rlbk
 22  AS
 23  	PROCEDURE ins_rlbk_vldn_stmt (v_ddl_or_dml	  IN VARCHAR2,
 24  				      v_rlbk_stmt	  IN CLOB,
 25  								      v_refresh_trig_y_n      IN VARCHAR2 default null,
 26  								      v_refresh_tab_name      IN VARCHAR2 default null,
 27  				      v_login_schema	  IN VARCHAR2 default null,
 28  				      v_rlbk_key_stmt	  IN CLOB default null,
 29  				      v_validation_stmt   IN CLOB default null,
 30  				      v_key_val_stmt	  IN CLOB default null,
 31  				      v_gtt_ins_stmt	  IN CLOB default null,
 32  								      v_object_name	  IN VARCHAR2 default null,
 33  				      v_gtt_object_name   IN VARCHAR2 default null)
 34  	AS
 35  	BEGIN
 36  	  NULL;
 37  	END;
 38  END pkg_ptch_rlbk;';
 39  END If;
 40  END;
 41  /

PL/SQL procedure successfully completed.

SQL> 
SQL> spool monitor_patches.log
SQL> 
SQL> SHOW USER
USER is "EMAMGR"
SQL> SELECT SYSDATE FROM DUAL;

SYSDATE
---------
09-OCT-17

1 row selected.

SQL> 
SQL> DECLARE
  2  schema_version EMA_SCHEMA_LOG.VALUE%TYPE;
  3  patch_exists	NUMBER;
  4  db_patch_level EMA_SCHEMA_LOG.VALUE%TYPE;
  5  db_patch_name VARCHAR2(255);
  6  
  7  BEGIN
  8  	patch_exists := 0;
  9  	db_patch_name := 'MONITOR_DB_201610_PATCH';
 10  
 11  -- Use the following as a template for writing any database patches
 12  
 13  ----------------------------------------------------------------------------------------------------------
 14  -- Case: XXXXXXX
 15  -- Patch Label: PXXXXXXX.201610
 16  -- Description: Provide meaningful description
 17  /*
 18  -- Specify the patch that you are trying to apply
 19  	db_patch_level := 'PXXXXXXX.201610';
 20  
 21  -- Check if the patch exists. If patch exists do not run the patch.
 22  	SELECT count(*) INTO patch_exists FROM EMA_SCHEMA_LOG WHERE NAME = db_patch_name AND VALUE = db_patch_level;
 23  
 24  -- If patch_exists is 0, then this patch is not available on the database, so apply it.
 25  	if patch_exists = 0 then
 26  
 27  	   -- Actual patch changes should be written here.
 28  
 29  	   -- Log an entry to EMA_SCHEMA_LOG so that next time around we will not apply the patch
 30  	      INSERT INTO EMA_SCHEMA_LOG (NAME, VALUE, LOG_DATE, DESCRIPTION, LINE)
 31  	      VALUES (db_patch_name, db_patch_level, SYSDATE,
 32  		   'Database Patch ' || db_patch_level || ' applied.', 1);
 33  
 34  	      COMMIT;
 35  	end if;
 36  */
 37  ----------------------------------------------------------------------------------------------------------
 38  
 39  
 40  
 41  EXCEPTION
 42  	WHEN OTHERS
 43  	THEN
 44  	   ROLLBACK;
 45  	   DBMS_OUTPUT.put_line ('EXCEPTION OCCURED WHILE APPLYING PATCH.');
 46  	   DBMS_OUTPUT.put_line ('DATABASE IS NOT AT THE LATEST PATCH LEVEL');
 47  END;
 48  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> spool off
SQL> 
SQL> DECLARE
  2  CNT NUMBER := 0;
  3  BEGIN
  4  SELECT count(*) into cnt FROM user_triggers WHERE trigger_name LIKE 'TRG_PTCH_RLBK_AUD_%';
  5  If cnt=0 then
  6  execute immediate 'DROP PACKAGE pkg_ptch_rlbk';
  7  END If;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> exit
Disconnected from Oracle Database 12c Standard Edition Release 12.1.0.2.0 - 64bit Production
